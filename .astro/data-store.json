[["Map",1,2,9,10,146,147,274,275,342,343],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.0","content-config-digest","bfc053d5523b0f77","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://www.lasitha.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[[null,{\"themes\":[\"one-dark-pro\",\"github-light\"],\"styleOverrides\":{\"frames\":{\"frameBoxShadowCssValue\":\"var(--shadow)\"}}}]],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,21,22,30,31,39,40,48,49,57,58,66,67,75,76,128,129,137,138],"angular-signals",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"deferredRender":20},{"title":14,"slug":11,"description":15,"pubDate":16},"Angular Signals: A Streamlined Approach to Reactivity","Angular Signals, a new feature released with Angular v16 that is set to transform change detection within Angular. Signals serve as an intelligent method for conveying data changes...",["Date","2024-03-17T04:00:00.000Z"],"import WideImage from \"../../components/blog/WideImage.astro\";\n\nAngular Signals, a new feature released with Angular v16 that is set to transform change detection within Angular. \nSignals serve as an intelligent method for conveying data changes, enabling Angular to precisely identify what requires updating\n\n\u003CWideImage>\n  ![Angular hulk introduces Signals](../../assets/images/blog/2024-03-17/hulk-signals.png)\n\u003C/WideImage>\n\n## Change Detection\n\nAngular's change detection mechanism, powered by \"dirty checking,\" efficiently updates the UI by detecting data changes within components.\nHowever, in complex applications, this traditional approach can lead to performance issues due to unnecessary checks throughout the component hierarchy. \n\nAngular Signals provide a solution by offering reactive building blocks that notify components when data changes occur. \nThis targeted approach enhances performance by minimizing unnecessary processing, resulting in more efficient updates for dynamic user interfaces.\n\n## What are Signals?\n\nSignals in Angular are powerful wrappers around data values with a unique ability to notify interested parties upon any changes to the encapsulated data. \nThis notification mechanism minimizes unnecessary re-renders and enables precise reaction to updates across components. \n\nSignals can store any data type, from simple primitives to complex objects, empowering them to manage diverse application states. \nAccessed solely through getter functions, Signals allow Angular to build a dependency map, facilitating targeted updates to only affected components. \n\n## Simplicity at its Core\n\n\nSignals provide a clear API for creating reactive data streams. \nUnlike the complexities of RxJS operators, Signals offer a more intuitive way to manage data changes. \nThis makes them ideal for developers of all experience levels.\n\n```ts\nimport {  signal, computed, effect } from '@angular/core';\n\nexport class SignalExample {\n  // Init\n  count = signal(1);\n\n  // Get (Same in Template || Typescript)\n  getCount = () => this.count();\n\n  // Setters\n  reset = () => this.count.set(1);\n  increment = () => this.count.update((c) => c + 1);\n\n  // Computed\n  doubled = computed(() => this.count() * 2);\n\n  // Effects\n  logCount = effect(() => console.log(this.doubled()));\n}\n```\n\n## Signals vs RxJS: Complementary, Not Competitive\n\nWhile Signals share similarities with RxJS Observables, they serve distinct purposes. \nRxJS offers a robust toolkit for complex asynchronous operations. \nSignals, on the other hand, excel in simplifying UI updates and component interactions within Angular's framework. \nThey work seamlessly together, allowing you to choose the right tool for the job.\n\n**Signals**\n\n```ts\nexport class SignalCount {\n  count = signal(1);\n  increment_count() { this.count.update(c => c + 1) }\n  log_count = effect(() => console.log(this.count()))\n}\n```\n\n**RxJS**\n\n```ts\nexport class RxjsCount {\n  count = BehaviorSubject(1);\n  count$ = count.pipe(\n    scan((acc, curr) => acc + curr),\n    tap((count) => console.log(count)),\n    takeUntilDestroyed()\n  )\n  increment_count() { this.count.next(1) }\n  count$.subscribe();\n}\n```\n\n> Let's break it down\n\n## Initialization / Get\n\nInitializing a Signal is straightforward. You use the `signal()` function to create a Signal object that holds your data. \nRetrieving the current value is done through a getter function, which allows Angular to track how and where the Signal is used.\n\n```ts\nconst name = signal('John Doe');\n\nconsole.log(name()); // Outputs: \"John Doe\"\n```\n\n## Setters\n\nSignals provide controlled ways to update their values. \n\n\nYou can use the `set()` method to replace the data within the Signal. \n```ts\nconst nameSignal = signal('John Doe');\n\nconsole.log(nameSignal()); // Outputs: \"John Doe\"\n\nnameSignal.set('Jane Doe');\n\nconsole.log(nameSignal()); // Outputs: \"Jane Doe\" (after update)\n```\n\n\n`update()` method applies a function to the current value of a Signal and sets the result as the new value.\n```ts\nconst countSignal = signal(0);\n\nconsole.log(countSignal()); // Outputs: 0\n\ncountSignal.update(value => value + 1);\n\nconsole.log(countSignal()); // Outputs: 1\n```\n\n## Computed\n\nSignals can be chained together to create derived data. \nYou define a computed Signal that depends on one or more existing Signals. \nWhenever the source Signals change, the computed Signal automatically recalculates its value, keeping your UI in sync.\n\n```ts\nconst firstName = signal('John');\nconst lastName = signal('Doe');\n\nconst fullName = computed(() => `${firstName()} ${lastName()}`);\n\nconsole.log(fullName()); // Outputs: \"John Doe\"\n\nfirstName.set('Jane');\n\nconsole.log(fullName()); // Outputs: \"Jane Doe\" (after update)\n```\n\n## Effect\n\nWhile Signals primarily focus on data flow, you can leverage them to trigger side effects. \nDefine an effect function that takes a Signal as input and performs actions like making API calls or interacting with external services. \nThis helps maintain a clean separation between data and its side effects.\n\n\n```ts\nconst searchTerm = signal('');\n\nloadList = effect(() => { \n  const term = searchTerm()\n  console.log(`Search term changed to: ${term}`);\n});\n\nsearch(term: string){\n  searchTerm.set('new search'); // Triggers the effect function  \n}\n```\n\n## Untracked\n\nFor specific scenarios where change detection isn't required, Signals offer the `untracked()` method. \nThis allows you to create Signals that exist outside Angular's change detection cycle, improving performance for data that doesn't directly affect the UI.\n\n```ts\neffect(() => {\n  const user = currentUser();\n  untracked(() => {\n    // If the `loggingService` reads signals, they won't be counted as\n    // dependencies of this effect.\n    this.loggingService.log(`User set to ${user}`);\n  });\n});\n```\n\n## Conclusion\n\nAngular Signals empower developers with a streamlined approach to reactive programming. \nTheir simplicity, clear separation from RxJS, and efficient change detection make them a valuable addition to the Angular toolbox. \nWith Signals, you can build more responsive and performant Angular applications with greater ease.","src/content/blog/angular-signals.mdx","664e68c2429b02d1",true,"ci-cd",{"id":21,"data":23,"body":27,"filePath":28,"digest":29,"deferredRender":20},{"title":24,"slug":21,"description":25,"pubDate":26},"Demystifying CI/CD","In the modern world, software development teams under go constant pressure to deliver new features and improvements quickly and effectively...",["Date","2024-02-28T05:00:00.000Z"],"import WideImage from \"../../components/blog/WideImage.astro\";\n\n\u003CWideImage>\n  ![CD/CD flow](../../assets/images/blog/2024-02-28/pipeline.jpeg)\n\u003Csmall>Photo by \u003Ca href=\"https://unsplash.com/@karosu\" target=\"_blank\" rel=\"noreferrer\">karosu\u003C/a> on \u003Ca href=\"https://unsplash.com\" target=\"_blank\" rel=\"noreferrer\">Unsplash\u003C/a>\u003C/small>\n\u003C/WideImage>\n\nIn the modern world, software development teams under go constant pressure to deliver new features and improvements quickly and effectively.\nThis is where continuous integration and deployment (CI/CD) come into play.\n\nCI/CD is a set of procedures for automating the software delivery process, from code changes to production releases.\nBy automating repetitive tasks and incorporating them into a streamlined flow, CI/CD assists development teams:\n\n- Deliver updates and new features to users more quickly, enhancing agility and competitiveness.\n- Reduce mistakes by catching defects early in the development process, resulting in higher-quality software.\n- Release developers from manual duties, enabling them to concentrate on innovation.\n\n## Understanding CI and CD\n\nCI/CD, though frequently used interchangeably, refers to two different but related practices: **Continuous Integration\n(CI)** and **Continuous Delivery/Deployment (CD)**.\n\nCI emphasizes **frequent and automated code integration**. Developers routinely merge their changes into a shared\nrepository, which initiates automatic builds and testing. This detects mistakes early, saving time and resources.\n\nCD expands on CI by **automating the delivery process**. After passing tests, code is immediately pushed to multiple\nenvironments for additional testing, or even to production in some situations. This simplifies releases and guarantees consistency in quality.\n\nTogether, CI/CD creates the groundwork for quicker, more dependable software delivery.\n\n![CI/CD flow](../../assets/images/blog/2024-02-28/ci-cd-flow.png)\n\u003Csmall>CI/CD flow\u003C/small>\n\n## Powering Faster, Higher-Quality Releases\n\nCI/CD isn't just a buzzword, it's a game-changer for software development. Here's how:\n\n- **Faster releases:** Frequent code merges and automated testing mean quicker issue detection and resolution. Imagine weekly or daily updates instead of months!\n- **Improved code quality:** Automated testing acts as a constant quality check, catching bugs early and ensuring code adheres to best practices. This translates to a more stable and reliable product.\n- **Reduced time to market:** Faster releases and improved quality mean getting your product to market quicker, giving you a competitive edge.\n- **Collaboration and continuous improvement:** CI/CD fosters collaboration and a culture of continuous learning, leading to a better codebase and happier developers.\n- **Rapid Feedback:** Developers receive quick feedback on their code changes, allowing them to fix issues before they become major problems.\n\nCI/CD is a mindset shift towards faster, higher-quality software and a more efficient development process.\n\n## Building your CI/CD Pipeline\n\nNow that you grasp the potential of CI/CD and its core stages, let's dive into the practical steps of building your own pipeline.\n\n### Define your pipeline stages\n\nThe CI/CD pipeline acts as a crucial assembly line, transforming code into production-ready applications. Let's dive deeper into the core stages:\n\n1. **Code Checkout (Version Control System Integration):**\n\n   Utilizing tools like Git, the pipeline fetches the latest code revision from the designated version control system (VCS) repository.\n   This ensures everyone involved is working on the same codebase version, promoting collaboration and preventing conflicts.\n\n2. **Build (Compilation and Packaging):**\n\n   This stage leverages build tools like Maven or Gradle to transform source code into an executable format or deployable artifact.\n   Depending on the project's requirements, language-specific build commands are executed to compile, link, and package the code into a\n   format suitable for deployment (e.g., JAR files, Docker images).\n\n3. **Test (Automated Quality Checks):**\n\n   This critical stage involves executing pre-defined automated tests to assess the functionality, quality, and security of the built code.\n   A diverse testing suite might be employed, encompassing unit tests (focusing on individual code units), integration tests (verifying interactions between components), and potentially end-to-end tests (simulating user interactions).\n\n4. **Deployment (Environment Delivery):**\n\n   Once the code successfully passes the test stage, it is delivered to various environments for further validation or release.\n   Depending on the CI/CD strategy, deployment might involve pushing the code to a staging environment for thorough testing before transitioning to production,\n   or directly deploying the code to production in specific scenarios, often employed with robust CI/CD pipelines and high confidence in the code's stability.\n\n![Stages Of CI/CD Pipeline](../../assets/images/blog/2024-02-28/stages-of-ci-cd-pipeline.png)\n\u003Csmall>Stages Of CI/CD Pipeline (\u003Ca href=\"https://www.simform.com/blog/scalable-ci-cd-pipeline-examples/\" target=\"_blank\" rel=\"noreferrer\">simform\u003C/a>)\u003C/small>\n\n\n### Choosing Your CI/CD Platform\n\nChoosing the proper CI/CD platform is crucial for streamlining your development process.\nHere's an overview of several popular alternatives and important considerations to consider.\n\n#### Popular CI/CD Platforms\n\n- **Jenkins** is open-source, extremely flexible, and provides significant plugin support. However, it takes more technical knowledge to set up and maintain.\n- **CircleCI** is cloud-based, has a user-friendly interface, and integrates well with a variety of tools and platforms. Customization options may be limited with compared to Jenkins.\n- **GitLab CI/CD** is integrated with GitLab, providing a single platform for development and CI/CD. This may not be appropriate for projects that do not use GitLab.\n- **GitHub Actions** is a part of GitHub, easy to use, and provides free plans for open-source projects. While easy to use and suitable for many projects, might require additional configuration or\n  customization for particularly complex workflows or large-scale enterprise deployments.\n- **Azure DevOps** is cloud-based, interacts easily with Microsoft Azure services, and provides a variety of features. Can be more costly than some other options we discussed.\n\n#### Factors to Consider\n\n- **Project size and complexity:** Larger or more complex projects may necessitate a platform that provides greater customization and scalability.\n- **Team skill level and experience:** Consider your team's technical knowledge and select a platform with an adequate learning curve.\n- **Integration with existing tools:** Make sure the platform works with your current development tools and version control system.\n- **Pricing and Features:** Evaluate the cost-benefit analysis, taking into account the features available and the pricing model (open-source, subscription, etc).\n- **Security and Compliance:** Prioritize platforms that fulfill your security and compliance needs.\n\n\u003CWideImage>\n  ![CD/CD flow](../../assets/images/blog/2024-02-28/CICD-Pipeline-e1613664546213.png)\n\u003Csmall>A CICD Pipeline (\u003Ca href=\"https://www.opsmx.com/blog/what-is-a-ci-cd-pipeline/\" target=\"_blank\" rel=\"noreferrer\">OpnsMx\u003C/a>)\u003C/small>\n\u003C/WideImage>\n\n## Conclusion\n\nCI/CD represents a pivotal shift in software development. By automating processes and promoting collaboration, it enables faster,\nhigher-quality software delivery. Embracing this approach not only streamlines pipelines but also fosters a culture of continuous improvement.","src/content/blog/ci-cd.mdx","496b63fe00d2415a","intro-ngrx",{"id":30,"data":32,"body":36,"filePath":37,"digest":38,"deferredRender":20},{"title":33,"slug":30,"description":34,"pubDate":35},"Leveraging NgRx for Predictable State Management","In this blog article, we will delve into utilizing NgRx, a state management tool, for apps to establish reliable and expandable state management within an e-commerce platform",["Date","2024-03-07T05:00:00.000Z"],"import WideImage from \"../../components/blog/WideImage.astro\";\n\nWhen it comes to developing in Angular, creating applications that can grow and be easily maintained is essential. \nA vital factor in making this happen is handling the application's state. In this blog article, we will delve into utilizing NgRx, \na state management tool, for apps to establish reliable and expandable state management within an e-commerce platform.\n\n\u003CWideImage>\n  ![NgRx](../../assets/images/blog/2024-03-07/ngrx.png)\n\u003C/WideImage>\n\n\n## State Management with NgRx\n\nNgRx is centered on the Redux pattern, a known design principle that excels in structuring application state in a way that is reliable and adaptable. \nNgRx focuses on elements like actions, reducers, effects and selectors, all crucial in managing state effectively within Angular applications.\n\n\n\u003CWideImage>\n  ![NgRx](../../assets/images/blog/2024-03-07/state-management-lifecycle.jpg)\n  \u003Csmall>NgRx: State management lifecycle\u003C/small>\n\u003C/WideImage>\n\n## Defining the Application State\n\nLets take a look at how an e commerce app's doing. \nIn this scenario we have to handle things like products, user details, items in the cart and so on. \nFor this blog post lets dive into handling the status of products available, in the store. Here's how we outline the setup of our apps state;\n\n```ts title=product.state.ts\n\nimport { Product } from './product.model';\n\nexport interface ProductState {\n  products: Product[];\n  loading: boolean;\n  error: string | null;\n}\n```\n\n## Actions\n\nEvents in our application are represented by actions. \nFor instance in our online store app we will specify actions like loading products adding items to the cart and managing errors. \nLet me show you an example of how we define actions, for loading products;\n\n```ts title=product.actions.ts\n\nimport { createAction, props } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport const loadProducts = createAction('[Product] Load Products');\nexport const loadProductsSuccess = createAction('[Product] Load Products Success', props\u003C{ products: Product[] }>());\nexport const loadProductsFailure = createAction('[Product] Load Products Failure', props\u003C{ error: string }>());\n```\n\nThen you can use your actions like this in your components.\n\n```ts title=product-list.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { loadProducts } from './product.actions';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n    // Dispatch action to load products\n    this.store.dispatch(loadProducts());\n  }\n}\n```\n\n## Reducers\n\nReducers determine how the state of an application evolves based on actions. \nBy creating a reducer function that accepts the state and an action as inputs, it will produce a new state as output where we can manage changes effectively. \nLets consider this example of a reducer designed to handle actions related to products;\n\n```ts title=product.reducer.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { ProductState } from './product.state';\nimport * as ProductActions from './product.actions';\n\nconst initialState: ProductState = {\n  products: [],\n  loading: false,\n  error: null\n};\n\nexport const productReducer = createReducer(\n  initialState,\n  on(ProductActions.loadProducts, state => ({ ...state, loading: true })),\n  on(ProductActions.loadProductsSuccess, (state, { products }) => ({\n    ...state,\n    products,\n    loading: false,\n    error: null\n  })),\n  on(ProductActions.loadProductsFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  }))\n);\n```\n\n## Effects\n\nEffects handle side effects such as asynchronous operations (e.g., HTTP requests). \nWe define an effect to load products from a server using a `ProductService` and dispatch appropriate actions based on the result. \nHere's an example of defining an effect for loading products:\n\n```ts title=product.effects.ts\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ProductService } from './product.service';\nimport * as ProductActions from './product.actions';\n\n@Injectable()\nexport class ProductEffects {\n\n  loadProducts$ = createEffect(() => this.actions$.pipe(\n    ofType(ProductActions.loadProducts),\n    switchMap(() =>\n      this.productService.getProducts().pipe(\n        map(products => ProductActions.loadProductsSuccess({ products })),\n        catchError(error => of(ProductActions.loadProductsFailure({ error: error.message })))\n      )\n    )\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private productService: ProductService\n  ) {}\n}\n```\n\n## Selectors\n\nSelectors are used to extract specific pieces of state from the store. \nWe define selectors to select products, loading state, and error state from the product state. Here's an example of defining selectors.\n\n```ts title=product.selectors.ts\n\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ProductState } from './product.state';\n\nconst getProductState = createFeatureSelector\u003CProductState>('products');\n\nexport const getProducts = createSelector(\n  getProductState,\n  state => state.products\n);\n\nexport const getLoading = createSelector(\n  getProductState,\n  state => state.loading\n);\n\nexport const getError = createSelector(\n  getProductState,\n  state => state.error\n);\n```\n\nThen you can use your selectors like this.\n\n```ts title=product-list.component.ts ins={5-6} ins={14-16} ins={24-27} ins=\", select\"\nimport { Component, OnInit } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { loadProducts } from './product.actions';\nimport { Product } from './product.model';\nimport { getProducts, getLoading, getError } from './product.selectors';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n  products$: Observable\u003CProduct[]>;\n  loading$: Observable\u003Cboolean>;\n  error$: Observable\u003Cstring>;\n\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n    // Dispatch action to load products\n    this.store.dispatch(loadProducts());\n\n    // Select products, loading state, and error state from the store\n    this.products$ = this.store.pipe(select(getProducts));\n    this.loading$ = this.store.pipe(select(getLoading));\n    this.error$ = this.store.pipe(select(getError));\n  }\n}\n```\n\n```html title=product-list.component.html\n\u003Cdiv *ngIf=\"loading$ | async\">Loading...\u003C/div>\n\u003Cdiv *ngIf=\"error$ | async as error\">Error: {{ error }}\u003C/div>\n\u003Cul *ngIf=\"products$ | async as products\">\n  \u003Cli *ngFor=\"let product of products\">\n    {{ product.name }} - {{ product.price }}\n  \u003C/li>\n\u003C/ul>\n```\n\n## Integration with AppModule\n\nTo integrate NgRx into our Angular application, we import the `StoreModule.forRoot` method and provide reducers and effects in the `AppModule`. \nHere's how we integrate NgRx into our `AppModule`.\n\n\n```ts title=app.module.ts ins={17-18}\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AppComponent } from './app.component';\nimport { ProductEffects } from './product.effects';\nimport { productReducer } from './product.reducer';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    StoreModule.forRoot({ products: productReducer }),\n    EffectsModule.forRoot([ProductEffects])\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n> Pretty dope, isn't it?\n\n![uhhh rock](../../assets/images/blog/2024-03-07/nice-rock.gif)\n\n## Conclusion\nNgRx offers a solution for handling state in Angular applications especially in situations like e-commerce web apps where state complexity can arise. \nBy utilizing NgRxs actions, reducers, effects and selectors you can create scalable and easy to manage state management solutions. \n\n\nIn our e-commerce case study we showcased how NgRx can effectively handle product state management setting the stage for Angular applications.\nMastering state management with NgRx equips you to craft top notch applications that align with the evolving needs of modern web development.","src/content/blog/intro-ngrx.mdx","6c4b3212f69f2cdf","getting-started-angular",{"id":39,"data":41,"body":45,"filePath":46,"digest":47,"deferredRender":20},{"title":42,"slug":39,"description":43,"pubDate":44},"Getting Started with Angular","Angular, developed and maintained by Google, stands as one of the most prominent front-end frameworks for building dynamic web applications. Its journey began in 2010...",["Date","2024-03-01T05:00:00.000Z"],"import NoShadow from \"../../components/blog/NoShadow.astro\";\n\n\u003CNoShadow>![Angular](../../assets/images/blog/2024-03-01/angular.png)\u003C/NoShadow>\n\nIn 2010, Google's Miško Hevery and Adam Abrons led an internal project to create Angular. \nThis initial version, known as AngularJS, immediately became popular because to its innovative approach to single-page application (SPA) development. \nHowever, with the expanding landscape of web development, a complete rewrite arose in 2016: Angular (also known as \"Angular 2+\").\n\n## What is Angular, and what makes it stand out?\n\nAngular is a free, open-source framework developed in TypeScript, a superset of JavaScript. \nIt allows developers to create dynamic and interactive web applications with a component-based architecture. \nThis means that applications are built using modular and reusable components, each with its own template (visual structure) and logic. \nThis strategy improves code organization, maintainability, and scalability.\nMany developers utilize Angular for developing complex web applications, enterprise-level applications, and progressive web apps (PWAs).\n\n![Lets begin](../../assets/images/blog/2024-03-01/let-us-begin-ready.gif)\n\n## Setting Up Your Development Environment\n\nBefore you start working on projects make sure your setup is properly configured for a workflow.\n\n1. **Setting up Node.js and npm**\n\n   Node.js is essential, for running JavaScript outside of web browsers while npm handles packages.\n   Head to nodejs.org download the installer, for your operating system. Follow the installation guidelines.\n   Confirm the installation by typing `node -v` and `npm -v` in your command line.\n\n2. **Installing Angular CLI**\n\n   Angular CLI simplifies development tasks by offering commands to create components, services and more.\n   To install it globally enter `npm install -g @angular/cli` in your command line. Check that its installed correctly by using `ng version`.\n\nOnce Node.js, npm and Angular CLI are set up on your system you're all set for development. Start building applications using Angular CLI and other tools in the Angular ecosystem.\n\n## Creating Your First Angular App\n\nAngular CLI makes it easier to start projects and sets up a foundation, for development.\n\n### Steps for Creating a New Angular Project using Angular CLI\n\n    Let's begin by opening your terminal or command prompt and entering `ng new my-app`, where `my-app`'s the chosen name for your project.\n    This command initiates the creation of an project with default configurations. Then navigate to the project directory by using `cd my-app`.\n\n### Overview of an Angular Projects Structure\n\n    The structure of the generated project will be as below\n\n![Angular Project Structure](../../assets/images/blog/2024-03-01/angular-project-structure.png)\n\n    - `src` - Here you will find all the source code for your Angular application, such as components, templates, styles and assets.\n    - `app` - The folder where most development work takes place; it includes components, services and various other Angular elements.\n    - `angular.json` - This file contains configuration settings for Angular CLI that define project configurations and build preferences.\n    - `package.json` - It lists the dependencies of the project as scripts for building, testing and running the application.\n    - `node_modules` - This directory stores project dependencies installed by npm.\n    - `index.html` - The HTML file that acts as the starting point, for your application.\n\n## Understanding Components\n\nComponents in Angular play an important role in building Angular applications by packaging HTML templates, CSS styles and functionality into reusable units.\n\n### Overview of Angular Components\n\nAngular components serve as self contained and reusable elements that define both the user interface and behavior of sections within an application.\nEach component consists of a TypeScript class, an HTML template and optional CSS styles. These components aid in organizing code into units simplifying the maintenance and scalability of applications.\n\n### Creation and Usage of Components in Angular\n\nTo initiate a component, use the Angular CLI command `ng generate component my-component`.\nThis command automatically generates files for the component, such as the TypeScript class, HTML template and CSS styles.\nThen you can incorporate this component by referencing its selector in templates to promote reusability throughout the application.\n\n![An Angular component](../../assets/images/blog/2024-03-01/angular-component.png)\n\nComponents enable breaking down user interfaces into smaller segments for easier management while encouraging code reuse and maintainability.\n\n## Templates, Data Binding, and Directives\n\nIn Angular, templates, data binding and directives are fundamental concepts that enable interactive web development.\n\n### Templates in Angular\n\nTemplates in refer to HTML files that outline the layout of a components view.\nThey merge HTML markup with syntax to help you showcase data create user interface components and manage user interactions.\nThese templates are linked with components and dynamically rendered on the web page.\n\n### Data Binding in Angular\n\nData binding in Angular establishes a connection between a components data (model) and its view (template) ensuring that changes made to one are\nreflected in the other. There are four types of data binding;\n\n1. **Interpolation** - Involves inserting component data into the template using braces `{{}}`.\n\n   For example, `\u003Ch1>Welcome, {{ name }}!\u003C/h1>` would display the value of the name property\n\n2. **Property Binding** - Links HTML element properties to component data using brackets `[]`.\n\n   For example, `[hidden]=\"isLoading\"` hides an element while the isLoading property is true.\n\n3. **Event Binding** - Connects DOM events like click or input to component methods using parentheses `()`.\n\n   For example, `(click)=\"handleClick()\"` triggers the `handleClick` method in the component when the element is clicked.\n\n4. **Two way Binding** - Combines property binding and event binding for a bi-directional data flow utilizing the `[(ngModel)] `syntax.\n\n### Angular Directives\n\nDirectives in act as markers on DOM elements that instruct Angular on how to handle those elements or their children.\nAngular comes with built directives such, as `ngIf` `ngFor` and `ngSwitch` to enhance templates with logic and features.\nYou have the flexibility to craft custom directives for expanding HTML capabilities.\n\n\n```html title=\"app.component.html\"\n\u003Ch1>{{ title }}\u003C/h1>\n\n\u003Cp>Welcome, {{ name }}!\u003C/p>\n\n\u003Cbutton [hidden]=\"isLoading\" (click)=\"handleClick()\">Click me\u003C/button>\n\n\u003Cul *ngIf=\"isLoading\">\n  \u003Cli>Loading...\u003C/li>\n\u003C/ul>\n```\n\n\n```ts title=\"app.component.ts\"\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'My App';\n  name = 'Alice';\n  isLoading = false;\n\n  handleClick() {\n    alert('Button clicked!');\n    this.name = 'Bob'; // Example of data change\n  }\n}\n```\n\n## Organizing Your Code with Services and Dependency Injection\n\n### Services\n\nImagine dedicated helpers in your application, providing functionality beyond the scope of individual components.\nThese are services, reusable pieces of logic that handle tasks like data access, business logic, or utility functions.\nThey can be shared and utilized by multiple components throughout your application, promoting code organization and reducing redundancy.\n\n### Dependency Injection\n\nThis design pattern fosters loose coupling and testability in Angular applications.\nInstead of directly creating dependencies within components, Angular employs dependency injection.\n\nHere's how it works:\n\n1. **Components declare their dependencies**: Components specify the services they require in their constructor parameters.\n2. **Angular injects dependencies**: When creating a component, Angular identifies the required services and injects them into the component's constructor, making them readily available for use.\n\nThis approach promotes several benefits:\n\n- **Improved code maintainability**: Dependencies are explicitly defined, simplifying code understanding and modification.\n- **Easier testing**: Components can be tested in isolation by providing mock dependencies, making testing more efficient and reliable.\n- **Flexibility**: The way dependencies are provided can be customized, enabling advanced scenarios like lazy loading or dynamic service configuration.\n\nHere's an example code demonstrating Angular services and dependency injection\n\n```ts title=\"app.component.ts\"\nimport { Component } from '@angular/core';\nimport { DataService } from './data.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  message: string;\n\n  constructor(private dataService: DataService) {\n    this.message = this.dataService.getData(); // Inject and access service data\n  }\n\n  updateData() {\n    this.dataService.setData('Data updated!'); // Modify service data\n    this.message = this.dataService.getData(); // Update component message\n  }\n}\n```\n\n```ts title=\"data.service.ts\"\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root' // Makes the service available throughout the application\n})\nexport class DataService {\n  private data: string = 'This is data from the service.';\n\n  getData() {\n    return this.data;\n  }\n\n  setData(newData: string) {\n    this.data = newData;\n  }\n}\n```\n\nThe component declares its need for the `DataService` by including it in its constructor's parameters.\nThis signifies to Angular that the component relies on the service for its functionality.\n\nWhen Angular creates an instance of the component, it sees this dependency and automatically injects an instance of the `DataService` into the component.\nThis provides the component with ready access to the service's methods and data\n\nBy leveraging services and dependency injection, you can structure your Angular applications for better maintainability, testability, and scalability.\n\n## Navigating Your Application with Angular Router\n\nImagine exploring different rooms in a house; Angular Router provides a similar experience for navigating between various sections (components)\nin your application. This built-in feature helps users seamlessly switch between different views (components) based on the URL they access.\n\n#### Configuring Routes\n\n1. You specify routes in an array within a `Routes` object. Each route is a configuration object with properties like:\n\n   - **path:** The URL path that corresponds to the route. For example, `'/about'` might map to an \"About\" component.\n   - **component:** The component to be displayed when the route is matched.\n\n    ```ts title=\"app-routing.module.ts\"\n    import { NgModule } from '@angular/core';\n    import { RouterModule, Routes } from '@angular/router';\n    import { HomeComponent } from './home/home.component';\n    import { AboutComponent } from './about/about.component';\n\n    const routes: Routes = [\n    { path: '', component: HomeComponent }, // Default route\n    { path: 'about', component: AboutComponent },\n    ];\n\n    @NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```\n\n2. Then, in your main template (`app.component.html`), use `routerLink` on anchor tags to link to different components and include `\u003Crouter-outlet>` where the content of those components should be displayed based on the selected route.\n\n    ```html title=\"app.component.html\"\n    \u003Cnav>\n    \u003Ca routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">\n        Home\n    \u003C/a>\n    \u003Ca routerLink=\"/about\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">\n        About\n    \u003C/a>\n    \u003C/nav>\n\n    \u003Crouter-outlet>\u003C/router-outlet>\n    ```\n\n   Import `AppRoutingModule` to make routing functionality available throughout the application.\n\n    ```ts title=\"app.module.ts\"\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { AppComponent } from './app.component';\n    import { AppRoutingModule } from './app-routing.module';\n    import { HomeComponent } from './home/home.component';\n    import { AboutComponent } from './about/about.component';\n\n    @NgModule({\n    declarations: [AppComponent, HomeComponent, AboutComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule, // Import AppRoutingModule here\n    ],\n    providers: [],\n    bootstrap: [AppComponent],\n    })\n    export class AppModule {}\n    ```\n\n#### Handling Navigation\n\n- **Navigation links:** Use the `routerLink` directive on anchor tags (`\u003Ca>`) to define navigation links within your templates.\n  For example, `\u003Ca routerLink=\"/about\">About Us\u003C/a>` creates a link that navigates to the \"About\" component when clicked.\n- **Programmatic navigation:** You can use the `Router` service to programmatically navigate between routes within your component logic.\n\n    ```ts title=\"app.component.ts\"\n    import { Component } from '@angular/core';\n    import { Router } from '@angular/router';\n\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    standalone: true\n    })\n    export class AppComponent {\n    constructor(private router: Router) {}\n\n    navigateToAbout() {\n        this.router.navigate(['/about']); // Programmatic navigation to the '/about' route\n    }\n    }\n    ```\n\n## Building Interactive Forms with Angular\n\n### Angular Forms\n\nCapturing user input is essential for many web applications. Angular provides two approaches to handle forms:\n\n#### Template-driven forms\n\nThey offer a simplified approach for building forms directly within your component templates using HTML elements and directives.\nThey are suitable for simpler forms with less complex validation requirements.\n\n```html title=\"user-form.component.html\"\n\u003Cform (ngSubmit)=\"onSubmit()\">\n  \u003Cdiv>\n    \u003Clabel for=\"name\">Name:\u003C/label>\n    \u003Cinput type=\"text\" id=\"name\" name=\"name\" [(ngModel)]=\"userModel.name\" required>\n  \u003C/div>\n  \n  \u003Cdiv>\n    \u003Clabel for=\"email\">Email:\u003C/label>\n    \u003Cinput type=\"email\" id=\"email\" name=\"email\" [(ngModel)]=\"userModel.email\" required>\n  \u003C/div>\n  \n  \u003Cdiv>\n    \u003Clabel for=\"age\">Age:\u003C/label>\n    \u003Cinput type=\"number\" id=\"age\" name=\"age\" [(ngModel)]=\"userModel.age\" required>\n  \u003C/div>\n  \n  \u003Cbutton type=\"submit\">Submit\u003C/button>\n\u003C/form>\n```\n\n    - We're using `[(ngModel)]` to bind form input fields to properties of the `userModel` object. This allows two-way data binding between the form inputs and the component class.\n    - `(ngSubmit)` is an event binding that triggers the `onSubmit()` method when the form is submitted.\n    - We use `required` attribute to make fields mandatory.\n\n**Do not forget to import `FormsModule` in your Angular module.**\n\n#### Reactive forms\n\nThey provide more control and flexibility by managing the form state and validation logic programmatically in the component class.\nThis approach is ideal for complex forms with intricate validation rules.\n\nHere's an example of how to implement a simple reactive form in Angular.\n\nFirst, let's create a new component called `ReactiveUserFormComponent`.\n\n```ts title=\"reactive-user-form.component.ts\"\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-reactive-user-form',\n  templateUrl: './reactive-user-form.component.html'\n})\nexport class ReactiveUserFormComponent implements OnInit {\n  userForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.userForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      age: [null, [Validators.required, Validators.min(18)]]\n    });\n  }\n\n  onSubmit() {\n    if (this.userForm.valid) {\n      console.log('Form submitted with data:', this.userForm.value);\n      // Here, you can perform actions like sending data to a server\n    } else {\n      console.error('Form is invalid');\n    }\n  }\n}\n```\n\nIn here, we are utilizing Angulars `FormBuilder` service to establish a `FormGroup` containing three form elements; name, email and age.\nWe've integrated validation rules to ensure that the name and email inputs are mandatory the email input is an email address and the age input is,\nat 18 years old.\n\nNow, let's create the corresponding template file `reactive-user-form.component.html`\n\n```html title=\"reactive-user-form.component.html\"\n\u003Cform [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\">\n  \u003Cdiv>\n    \u003Clabel for=\"name\">Name:\u003C/label>\n    \u003Cinput type=\"text\" id=\"name\" formControlName=\"name\">\n    \u003Cdiv *ngIf=\"userForm.get('name').invalid && userForm.get('name').touched\">\n      \u003Cspan *ngIf=\"userForm.get('name').errors.required\">Name is required.\u003C/span>\n    \u003C/div>\n  \u003C/div>\n  \n  \u003Cdiv>\n    \u003Clabel for=\"email\">Email:\u003C/label>\n    \u003Cinput type=\"email\" id=\"email\" formControlName=\"email\">\n    \u003Cdiv *ngIf=\"userForm.get('email').invalid && userForm.get('email').touched\">\n      \u003Cspan *ngIf=\"userForm.get('email').errors.required\">Email is required.\u003C/span>\n      \u003Cspan *ngIf=\"userForm.get('email').errors.email\">Invalid email format.\u003C/span>\n    \u003C/div>\n  \u003C/div>\n  \n  \u003Cdiv>\n    \u003Clabel for=\"age\">Age:\u003C/label>\n    \u003Cinput type=\"number\" id=\"age\" formControlName=\"age\">\n    \u003Cdiv *ngIf=\"userForm.get('age').invalid && userForm.get('age').touched\">\n      \u003Cspan *ngIf=\"userForm.get('age').errors.required\">Age is required.\u003C/span>\n      \u003Cspan *ngIf=\"userForm.get('age').errors.min\">Age must be at least 18.\u003C/span>\n    \u003C/div>\n  \u003C/div>\n  \n  \u003Cbutton type=\"submit\" [disabled]=\"userForm.invalid\">Submit\u003C/button>\n\u003C/form>\n```\n\nIn this template, we bind the FormGroup to the `\u003Cform>` element using `[formGroup]=\"userForm\"`.\nEach input field is associated with a form control using formControlName.\nWe also show error messages if the form control is invalid and has been touched by the user.\n\n**Do not forget to import the `ReactiveFormsModule` in your Angular module**\n\n### Validating User Input\n\nTo ensure data accuracy, Angular offers various built-in validation features:\n\n- **Validators:** These are functions that check the validity of form controls (individual input fields).\n  Angular provides pre-built validators for common scenarios like checking if a field is required, has a minimum length, or matches a specific pattern.\n  You can also create custom validators for unique validation needs.\n- **Error messages:** Define error messages associated with specific validation failures.\n  These messages are displayed to the user when a validation error occurs, providing guidance on correcting their input.\n\nYes, we used validators and error messages previously in our reactive forms example.\n\n## Interacting with the World - Utilizing Angulars HTTP Client, for API Integration\n\nAngular provides a tool to connect with services. The **HTTP client module**. This feature enables your application to send HTTP requests to APIs\n(Application Programming Interfaces). Fetch data from servers located remotely.\n\n**Sending HTTP Requests:**\n\n1. **Import the HttpClient:** Start by importing the `HttpClient` from `@angular/common/http` in your component.\n2. **Inject the HttpClient:** Inject the `HttpClient` into your components constructor to access its functionalities.\n3. **Make the request:** Use the appropriate `HttpClient` method based on the HTTP verb (GET, POST, PUT, DELETE) and specify the URL along with any parameters when making the call.\n\n   For example, `this.http.get\u003CExampleInterface>('https://api.example.com/data')` fetches data from the specified URL using an HTTP GET request.\n\n**Integrating APIs:**\n\n- Once you've retrieved data from an API, you can process and display it within your component using data binding techniques\n  like property binding and interpolation.\n- Depending on the APIs features there might be a need to send data to the server via HTTP POST, PUT or DELETE requests.\n  The procedure remains similar; however ensure that you include the payload (data being sent), in the request options.\n\nHere is a sample of how you can utilize Angulars `HttpClient` module to dispatch HTTP requests to an API.\n\nFirst, ensure that you have included `HttpClientModule` in your module (`app.module.ts`).\n\nThen, let's create a service to handle API requests. Create a file named `data.service.ts`\n\n```ts title=\"data.service.ts\"\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ApiResponse } from '.../interfaces/api-response.interface';\nimport { PostData } from '.../interfaces/post-data.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) { }\n\n  getData(): Observable\u003CApiResponse> {\n    return this.http.get\u003CApiResponse>('https://api.example.com/data');\n  }\n\n  postData(data: PostData): Observable\u003CApiResponse> {\n    return this.http.post\u003CApiResponse>('https://api.example.com/data', data);\n  }\n}\n```\n\nFinally, let's use this service in our component.\n\n```ts title=\"app.component.ts\"\nimport { Component } from '@angular/core';\nimport { DataService } from './data.service';\nimport { ApiResponse } from './api-response.interface';\nimport { PostData } from './post-data.interface';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  responseData: ApiResponse;\n  postData: PostData = { name: '', email: '', age: 0 };\n  postResponse: ApiResponse;\n\n  constructor(private dataService: DataService) { }\n\n  fetchData(): void {\n    this.dataService.getData().subscribe(\n      (data: ApiResponse) => {\n        this.responseData = data;\n        console.log('Received data:', this.responseData);\n        // Process and display data as needed\n      },\n      (error: any) => {\n        console.error('Error fetching data:', error);\n      }\n    );\n  }\n\n  sendData(): void {\n    this.dataService.postData(this.postData).subscribe(\n      (response: ApiResponse) => {\n        this.postResponse = response;\n        console.log('Response from server:', this.postResponse);\n        // Handle response from server\n      },\n      (error: any) => {\n        console.error('Error sending data:', error);\n      }\n    );\n  }\n}\n```\n\n## Keeping Your Angular Project Clean and Efficient\n\nBy following these best practices and tips, you can ensure your Angular projects are well-organized, maintainable,\nand performant, contributing to successful and sustainable web application development.\n\n**Project Organization:**\n\n- **Feature Modules:** Break down your application into feature modules based on functionality. This promotes modularity and simplifies maintenance of larger projects.\n- **Consistent Naming:** Adopt consistent naming conventions for components, services, files, and variables. This improves code readability and collaboration.\n- **Utilize Folders:** Organize code logically using folders for components, services, modules, and assets. This enhances project structure and navigation.\n\n**Clean and Maintainable Code:**\n\n- **Follow Style Guide:** Adhere to the \u003Ca href=\"https://angular.dev/style-guide\"  target=\"_blank\" rel=\"noreferrer\">Angular style guide\u003C/a> for consistent and readable code.\n- **Comments:** Include clear and concise comments explaining complex logic or non-obvious code sections.\n- **Linting:** Use tools like ESLint to enforce code style and catch potential errors early in the development process.\n- **Write Unit Tests:** Implement unit tests for components and services to ensure their functionality and prevent regressions in future changes.\n\n**Performance Optimization:**\n\n- **Lazy Loading:** Load modules only when needed, improving initial application load time. Utilize the `RouterModule.forChild` method and the `loadChildren` property for lazy loading modules.\n- **Change Detection Optimization:** Identify and address unnecessary change detections in your components to improve performance. Utilize techniques like `OnPush` change detection strategy and `trackBy` in your `*ngFor` loops.\n- **Code Splitting:** Split your application code into smaller bundles to minimize initial payload size downloaded by the user.\n- **Performance Profiling:** Use browser developer tools to identify performance bottlenecks and profile your application to identify areas for improvement.\n\n## Continuing Your Angular Journey: Next Steps\n\n**Deepen Your Knowledge:**\n\n- **Official Angular Documentation:** The comprehensive \u003Ca href=\"https://angular.dev\"  target=\"_blank\" rel=\"noreferrer\">Angular\u003C/a> website\n  is your source of truth for everything Angular, offering detailed guides, tutorials, and API references.\n- **Interactive Tutorials and Courses:** Explore interactive tutorials and online courses offered on various platforms\n  to apply your learning through practical exercises and projects.\n\n  Some recomended options:\n\n  - \u003Ca href=\"https://angular.dev/tutorials\" target=\"_blank\" rel=\"noreferrer\">\n      The Angular Tutorials\n    \u003C/a>\n  - \u003Ca\n      href=\"https://www.pluralsight.com/paths/angular\"\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      Angular Fundamentals by Pluralsight\n    \u003C/a>\n  - \u003Ca\n      href=\"https://www.udemy.com/course/the-complete-guide-to-angular-2\"\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      Angular - The Complete Guide by Maximilian Schwarzmüller\n    \u003C/a>\n\n- **Join the Angular Community:** Engage with the vibrant Angular community through forums, discussions, and events.\n  Sharing knowledge and asking questions can be an invaluable learning experience.\n\n**Build and Contribute:**\n\n- **Start Building:** Put your newfound knowledge into action! Begin with smaller projects and gradually work your way up to more complex applications.\n  Experimenting and building projects is the best way to solidify your understanding and gain practical experience.\n- **Contribute to the Open-Source Ecosystem:** Consider contributing to open-source libraries or projects related to Angular.\n  This is a fantastic way to give back to the community, showcase your skills, and collaborate with other developers.\n\nRemember, the path to becoming an proficient Angular developer is an ongoing journey of learning, practicing, and building.\nEmbrace the process, stay curious, and actively engage with the community. By constantly learning and putting your skills into practice,\nyou'll be well on your way to crafting impressive and impactful web applications with Angular!\n\n![angular-feeling](../../assets/images/blog/2024-03-01/angular-feeling.png)","src/content/blog/getting-started-angular.mdx","e010a6bc51e871c4","my-journey",{"id":48,"data":50,"body":54,"filePath":55,"digest":56,"deferredRender":20},{"title":51,"slug":48,"description":52,"pubDate":53},"My journey to become a software engineer","In 2002, when I was nine years old, I stepped into TEC Sri Lanka, a place filled with computers and cutting edge technology. It felt like entering a new world...",["Date","2024-02-05T05:00:00.000Z"],"import WideImage from \"../../components/blog/WideImage.astro\";\n\n## Unraveling the Digital Universe at age 9\n\nIn 2002, when I was nine years old, I stepped into \u003Ca target=\"_blank\" rel=\"noreferrer\" href=\"https://www.tecsrilanka.com.lk/\">TEC Sri Lanka\u003C/a>,\na place filled with computers and cutting edge technology. It felt like entering a new world! Little did I know then that this\nexperience would ignite my passion, for all things related to computers.\n\nBack in those days computers seemed magical. They had the power to perform tasks! At TEC Sri Lanka I didn't just\nlearn how to type or use a mouse, I delved deeper. Discovered the art of communicating with these machines. I\nacquired skills in crafting websites using HTML and CSS and even grasped the fundamentals of programming. It was\nlike unlocking the language of technology!\n\n![a GW BASIC Lesson](../../assets/images/blog/2024-02-05/30604187_1926349017675514_6999401850311016448_n.jpg)\n\u003Csmall>A GW BASIC lesson from 2003\u003C/small>\n\nBy the time I turned fifteen my collection of certificates showcased my mastery of computer skills. However, it\nwasn't about achieving certifications, it was about the thrill of seeing my code come to life solving problems\nthrough thinking and realizing that technology opened endless possibilities.\n\nThis is the beginning of my journey. The simple code that captivated me at nine has evolved into software\nsystems while basic web pages have transformed into applications.\n\n## Adventures in Dad's Computer Lab\n\nI didn't want to go to school; instead, I wanted to go to my dad's school computer lab. He was a teacher in\ncharge there. Since we didn't have a computer at home, I spent about three to four years turning that lab into\nmy own tech haven. From like sixth to eighth grade, it felt like my second home. Sure, games were fun, but what\nreally got me going was coding. I loved messing around with Visual Basic 6.0, creating simple stuff like\ncalculators and forms. Even though they were basic, seeing my code actually work was so exciting!\n\n![Old computer lab in 2000s](../../assets/images/blog/2024-02-05/computer_lab.jpeg)\n\nLearn to code in a lab was a slow process, but it taught me to be really resourceful and great at\nproblem-solving! The lab might not have been fancy, but it's where my passion for coding really blossomed. It\ntaught me more than just technical skills, it showed me the importance of determination, resourcefulness, and\nalways being eager to learn - qualities that still come in handy as a software engineer today.\n\n## The Arrival of My First Computer\n\nAh, the struggle of relying on borrowed computers! But then, imagine this! A gleaming new computer proudly\ndisplayed in our living room, thanks to my amazing dad! It wasn't just any computer, it was a gateway to a whole\nnew world of digital adventures. No more limitations of the school lab, this was our own digital haven, shared\nwith my brother, who was just as tech-savvy.\n\n![My first computer](../../assets/images/blog/2024-02-05/my-first-computer.jpeg)\n\nBut let's be honest, were we all about serious stuff like coding? Not really! Like most kids, we were all about\nthe games. We dove headfirst into classics like Age of Empires, Mortal Kombat, and Need for Speed, spending\nendless hours competing (and sometimes teaming up!). Those virtual worlds weren't just for fun, they were\nmoments of bonding, sparking friendly competition and lots of laughter.\n\n## Invested more in education\n\nIt wasn't just about playing games, they opened the door to my growing curiosity about technology. Eager to\nlearn more, I pursued higher education during my GCE A/L years, opting for an interesting mix of subjects: IT,\nEconomics, and History.\n\nBut my quest for knowledge didn't end there. While juggling my GCE A/L studies, I delved deeper into the\npractical side of technology with the\n\n\u003Ca target=\"_blank\" rel=\"noreferrer\" href=\"https://www.nccedu.com/\">NCC Education\u003C/a> \ninternational diploma in computing at \u003Ca target=\"_blank\" rel=\"noreferrer\"  href=\"https://www.idmedu.lk/\">IDM Nations Campus\u003C/a>. \nThis program gave me hands-on experience with programming languages, web development,\nand networking principles. Mixing theory with practice was key. GCE A/L provided\nthe groundwork, and the NCC diploma honed my technical skills and enriched my understanding\nof core computing concepts. It was like laying the foundation and then mastering\nit in real-world scenarios.\n\nLooking back on it now, the combination of both academic paths proved incredibly valuable. My diverse background\ngave me a unique perspective, turning me into more than just a skilled coder. I became someone who could not\nonly write code but also analyze, explain, and put technology into context. This broad understanding became a\nsignificant asset in my future career as a software engineer.\n\n## Campus years\n\nLife isn't always a clear-cut path, sometimes it's a winding road full of unexpected turns. My journey through\nGCE A/L had its fair share of uphill battles, but amidst the struggle, it opened doors to a realm of new\npossibilities. Together with a friend, we dared to take on a new challenge - pursuing a software engineering\ndegree at \u003Ca target=\"_blank\" rel=\"noreferrer\" href=\"https://www.sliit.lk\">Sri Lanka Institute of Information Technology (SLIIT)\u003C/a>\n, a beacon of opportunity in Sri Lanka's educational landscape.\n\n\u003CWideImage>\n  ![SLIIT Malabe](../../assets/images/blog/2024-02-05/SLIIT-malabe.jpg)\n  \u003Csmall>SLIIT Campus Malabe\u003C/small>\n\u003C/WideImage>\n\nWhile GCE A/L may not have showcased my brightest academic moments, it served as a tough situation that helps\nyou become stronger, teaching me invaluable lessons in determination, adaptability, and courage. During those\ntimes, I discovered inner strengths I never knew I had, pushing me onward to new and unfamiliar paths.\n\nSLIIT, though, was like a whole new world opening up before me. It wasn't merely a campus, it was a melting pot\nof transformation, sculpted to shape aspiring software engineers into adept innovators. Here, I immersed myself\nin the complex algorithms, data structures, object-oriented programming, and the ever-evolving art of software\ndesign. Each new concept, each line of code, was a portal to uncharted realms of possibility, each keystroke a\nstep closer to unlocking the secrets of the digital universe.\n\n![SLIIT Malabe auditorium](../../assets/images/blog/2024-02-05/The-Faculty-of-Computing-SLIIT-held-an-inauguration-session-to-Welcome-the-new-Class-of-2023-4.jpg)\n\u003Csmall>SLIIT Inauguration Day\u003C/small>\n\nBut SLIIT wasn't just a classroom, It was a melting pot of creativity, where ideas bubbled and flourished, where\ntheory met practice in a symphony of innovation. Through hands-on projects and exhilarating hackathons, I\ndiscovered the true essence of software engineering - the thrill of seeing lines of code spring to life, the joy\nof unraveling complex problems with elegant solutions, and the profound satisfaction of creating something\nmeaningful that transcended the virtual realm.\n\nCertainly, it wasn't all smooth sailing. Wrestling with tricky algorithms, debugging errors in my code, and\nburning the midnight oil to meet project deadlines became familiar companions on my journey. But with each\nhurdle, I emerged more resilient, more resourceful, and even more determined to carve out my path in the world\nof coding.\n\nReflecting on my time at SLIIT, I realize it was a melting pot of growth for me. It not only honed my technical\nskills but also sharpened my problem-solving abilities and nurtured my ability to collaborate effectively with\nothers. Yet, perhaps most importantly, it deepened my love for software engineering, transforming me from a\ncurious novice into a confident and skilled practitioner in this field.\n\nImagine diving headfirst into challenging tasks, fueled by the power of Object-Oriented Programming (OOP),\nfinding pure joy in untangling software puzzles through troubleshooting, and experiencing the exhilaration of\nbringing ideas to life using languages like JavaScript and C#. Each new concept felt like discovering a missing\npuzzle piece, and every project propelled me forward on my journey to becoming a well-rounded developer.\n\n![a lecture room in SLIIT](../../assets/images/blog/2024-02-05/lecture-c.jpeg)\n\u003Csmall>A lecture room at SLIIT\u003C/small>\n\nExposing into mobile app development was like stepping into a world of endless possibilities. Creating apps that\nconnected people, solved real-world problems, or simply brought joy was incredibly fulfilling. Similarly,\ndelving into web development allowed me to develop interactive experiences that captivated users online.\n\nBut my journey didn't end there, it took me deeper into the digital realm. Exploring backend development with\ntechnologies like HTML and RESTful APIs peeled back the layers, revealing the intricate systems that powered\nwebsites. It was like peeking behind the curtain to unravel the hidden mechanics that made websites tick.\n\nFull stack development felt like solving a puzzle. It wasn't about mastering skills, it involved understanding\nhow all the different parts of a website worked together harmoniously. It was similar to being a conductor\norchestrating every element to provide users with an enjoyable experience.\n\nDuring my time at SLIIT I not only improved my abilities but also sharpened my research skills. I explored the\nworld of image processing. Dipped my toes into game development. Each new experience expanded my horizons making\nme more adaptable and resourceful than before.\n\nAt SLIIT, group projects were like forging grounds for me. They weren't just assignments, they were\nopportunities to bond with classmates, face challenges together, and celebrate victories as a team. Working\nalongside others taught me the power of collaboration and the value of pooling our strengths to overcome\nobstacles. Through these projects, I learned not only how to code but also how to communicate effectively,\ncompromise when needed, and trust in the abilities of my teammates. In essence, group projects were the heart of\nmy SLIIT experience, shaping me into a more collaborative, empathetic, and resilient individual.\n\n\u003CWideImage>\n  ![SLIIT graduation](../../assets/images/blog/2024-02-05/sliit-graduation.webp)\n  \u003Csmall>SLIIT Graduation Day\u003C/small>\n\u003C/WideImage>\nThe knowledge and skills I acquired at SLIIT were priceless. They provided me with\nthe tools to navigate the evolving technology landscape tackle various challenges\nand adapt to new tools and techniques. However, what truly mattered was that they\nignited and fueled my passion for creating, problem solving and leveraging code as\na catalyst, for change.\n\n## My first job - the dream came true\n\nMy time at SLIIT was a whirlwind of experiences, filled with both challenges and moments of growth. As\ngraduation approached, I found myself standing at a crossroads, uncertain about what the future held. With a mix\nof nervousness and excitement, I embarked on the journey of finding a job, eager to see where my newfound skills\nwould take me. It was during this search that a friend mentioned an internship opportunity at\n\n\u003Ca target=\"_blank\" rel=\"noreferrer\" href=\"https://www.findmyfare.com\">Findmyfare.com\u003C/a>, \na travel tech startup with a lot of potential. Little did I know, this internship\nwould mark the beginning of my adventure into the professional world of software\nengineering.\n\n![findmyfare.com](../../assets/images/blog/2024-02-05/findmyfare.com.jpeg)\n\u003Csmall>findmyfare.com IT department\u003C/small>\n\nImmersed in the dynamic environment of a startup, I encountered real-world challenges, collaborated with\nseasoned developers, and gained invaluable insights into the industry. Then, to my surprise and delight, came\nthe offer I had been dreaming of - a chance to join Findmyfare full-time as a graduate developer!\n\nMy transition into my first role as a full-stack developer felt like stepping into a live coding adventure.\nInstead of merely working on school projects, I found myself crafting features for a real platform, shaping the\ntravel experiences of its users directly. The tech tools I utilized - such as PHP (Laravel and CodeIgniter) and\nAngular - were both familiar and demanding, pushing me to expand my skills rapidly.\n\nThe initial nervousness soon gave way to excitement as I wrote each line of code, resolved bugs, and delivered\nnew features. Witnessing my contributions come to life and knowing I was making a meaningful impact filled me\nwith immense satisfaction. The supportive team, the continuous learning opportunities, and the sense of\ncontributing to something significant only fueled my passion further.\n\n## Reflections on a Path Well-Traveled\n\nLooking back on my time at Findmyfare, it was more than just a job, it was my entry into the world of\nprofessional software engineering. I learned the value of teamwork, the importance of adapting to new\nsituations, and the need to keep learning. But most importantly, it solidified my love for coding and my desire\nto use technology for good.\n\nFrom a young kid fascinated by code in a school lab to an experienced software engineer working on real\nprojects, my journey has been full of dedication, passion, and growth. We've explored my early love for\ntechnology, the challenges and successes of my education, and the excitement of my first job.\n\nBut this is only the beginning. The world of software engineering is always changing, with new challenges and\nopportunities. As you continue your journey, it's important to remember these lessons;\n\n- Let your natural curiosity guide you as you explore areas and keep expanding your knowledge.\n- Every challenge you encounter is an opportunity for growth. Celebrate your achievements no matter how big or\n  small. Don't let setbacks discourage you.\n\n- Technology's constantly evolving so make sure to stay updated on the latest developments and keep honing your\n  skills.\n\n- Collaboration plays a role in achieving success in software engineering. Take the time to learn from your\n  colleagues work well with others and come up with solutions together.\n\n- Utilize your coding abilities to make an impact on peoples lives by solving problems simplifying tasks or\n  inspiring others.\n\nI hope my personal journey serves as inspiration for developers. With dedication, determination and a passion\nfor learning anyone can reach their goals, in the tech world. So keep coding keep learning and keep making a\ndifference - the world is eagerly anticipating what you will achieve next!\n\nRemember this is one chapter of my story. Countless adventures await me in my software engineering career. Who\nknows what lies ahead? However one thing is certain; my enthusiasm, dedication and aspiration to create an\ninfluence will always guide me towards a future.\n\n![boarding place](../../assets/images/blog/2024-02-05/boarding-place.jpg)\n\u003Csmall>Fun times with my buddies\u003C/small>","src/content/blog/my-journey.mdx","797ec75957615e76","new-job",{"id":57,"data":59,"body":63,"filePath":64,"digest":65,"deferredRender":20},{"title":60,"slug":57,"description":61,"pubDate":62},"My Journey to Finding My Dream Job as an Immigrant in Canada","Moving to Canada and trying to find a job was an adventure I knew would be challenging, but I didn't expect just how tough it would be. I heard nothing back, or I faced rejections....",["Date","2024-08-29T04:00:00.000Z"],"import WideImage from '../../components/blog/WideImage.astro'\n\n\u003CWideImage>\n  ![success](../../assets/images/blog/2024-08-28/dream-job.png)\n\u003C/WideImage>\n\n## \"Could you please introduce yourself to us?\"\n\nI'm Lasitha Prabodha Weligampola, a software developer with extensive experience in technologies like Angular, React, TypeScript, C#, \nASP.NET Core, SQL, and Azure. \nDuring my journey so far I have had the opportunity to work for companies based in Sri Lanka and Norway \nbefore making my way, to Canada. Throughout my career path I have been actively engaged in developing \nweb applications while also guiding other developers and leading teams towards achieving success. \n\n## The Job Search Journey\n\nWhen I first started my job search in Canada, \n\n> I was optimistic. \n\nHaving worked in the tech field for some time now and considering my background and skills, \nI thought it would be a matter of weeks before I found the right role. At the beginning, as a \nfull stack developer I felt optimistic that my skills would lead to job opportunities and interviews swiftly.\nBut after applying to hundreds of job opportunities and receiving either rejections or no responses at all, \nI realized that finding a job in this country was going to be a far more challenging than I had anticipated.\n\nAs my initial expectations faded, I realized I needed to change my approach. \nI started fine-tuning my resume and cover letters further by customizing them to match each job description more closely.\nTodays job market competition isn't just about sending out resumes; it's also, about networking and building your professional reputation. \nBut guess what? \n\n> That didn't go as planned. \n\nDue to job-hunting anxiety, my interactions with others started to decline.\n\nHowever, one interaction that couldn't be avoided was interviews.\nI had to focus heavily on improving my interview skills, which was a significant challenge for me. \nAt first, talking with assurance during job interviews in a setting proved to be quite challenging for me. \nI made every effort to become more at ease with the procedure. \n\n## Rejections \n\nThe journey was far from smooth. There were days when the rejections were hard to take, and the \nlack of responses left me wondering if I was doing something wrong. \nOftentimes, I struggled to articulate my thoughts effectively when feeling nervous. \nEvery rejection or non-response felt like a setback. \n\nDuring those times of struggle and challenges I always told myself that every obstacle was a chance to grow and learn. \n\n## What Kept Me Motivated\n\nThe job search was tough, but there were a few things that kept me going even when the rejections piled up. \nThe first and biggest motivation was my wife. She's been an incredible source of strength for me. Back home, she worked as a software quality assurance engineer, \nbut when we moved to Canada, she took on a completely new role, working hard at a restaurant. She tried many months looking for a role in her experienced field, \nbut luck was not on her side. Seeing her adapt to such a different environment and work tirelessly to support us was a huge push for me. \nI couldn't stand the thought of sitting at home while she worked her ass off to cover our apartment rent and groceries.\n\nBesides my wife, there were other things that helped me stay motivated. \nTo add some organization to my routine and reduce job searching stress, \nI follow a routine where I allocate specific time slots for various tasks throughout the week, \ndedicating 10 hours per week to applying for jobs, another 10 hours to learning something new, and 10 hours to my part-time remote job. \nThe rest of my time was filled with college studies, which, thankfully, didn't pose much of a challenge for me. \n\nAfter purchasing a domain I decided to share my thoughts on the internet through writing as a means to unwind and distract myself from the pressures of job hunting. \nEach blog post felt like a small accomplishment, giving me a sense of purpose and progress. \nI believe this might have helped me get shortlisted for interviews as well. \n\nLastly, I took up some side projects and online courses to keep my skills sharp. \nThese activities allowed me to continue learning and stay productive, even when job offers weren't coming in. \n\n## Changes to My Approach\n\nAs I navigated through the job search process, I made several changes to my approach that eventually led to success. \nInitially, I believed that applying to as many positions as possible would increase my chances, but I quickly realized \nthat quality mattered more than quantity. I began customizing my resume and cover letters meticulously for each job, \naligning them with the specific requirements. \n\n![me](../../assets/images/blog/2024-08-28/apply-for-all.webp) \n\nYou might be thinking this approach has improved my chances of getting noticed, but no. There was no change. \nThis led me to take a step back and reflect on my work experiences. I focused on identifying the core skills \nI had gained and how best to express them. \n\nThe key was in,\n\n> simplifying and sharpening my presentation.\n\nI revamped my resume with active language, short sentences, and concise bullet points, five to six key highlights \nper company that showcased my strengths. I trimmed down content from my earliest experiences, as they were too old to be relevant.\nI also ensured it was a one-page resume, making it easier for recruiters to quickly grasp my qualifications. \nThis streamlined approach made a significant difference.\n\nAnother change was my approach to interviews. I invested more time in preparing for each interview by \nresearching the companies thoroughly and practicing my responses to common questions. \nI also worked on improving my communication skills to express my thoughts more clearly and confidently. \nThis preparation helped me perform better in interviews and left a positive impression on potential employers.\n\n## The Job Offer\n\n![me](../../assets/images/blog/2024-08-28/welldone.jpeg) \n\nThe moment I received the job offer was surreal. After months of hard work and persistence, \nit felt like a weight had been lifted off my shoulders. \n\n> I remember reading the offer letter multiple times just to make sure it was real. \n\nThe reason I decided to take the job offer was because it matched my career aspirations well and provided \nroom for development while also reflecting values important to me in its work environment. \nThe excitement of embarking on a new chapter in my career, coupled with the deep sense of accomplishment, \nmade all the challenges and hard work feel truly worth it.\n\n## Advice to My Fellow Job Seekers\n\nIf you're currently, in search of a job my best advice is to stay persistent and keep pushing. \nFinding a job can be quite daunting and discouraging at times. It is crucial to stay persistent and continue striving forward. \nIt's often suggested to tailor your job application, for each position you apply for; however it's equally crucial to \nacknowledge when a role matches your expertise and abilities. Instead of being a jack of all trades, consider \nmaintaining one strong resume that highlights your core strengths. \n\nFocus on networking and building connections within your industry. Don't be afraid to ask for feedback. \nIt can provide valuable insights for improvement. \nContinuous learning is essential, whether it's honing your skills or gaining a deeper understanding of the job market. \n\n## Looking Forward\n\nStepping into this position fills me with hope and a strong sense of purpose. My aim is to excel in my duties \nand make valuable contributions to our team. I'm grateful for the journey that brought me here.\n\n## Closing Thoughts\n\nReflecting on my experience, I've come to realize that the job search is as much about personal growth as it is about finding the right role. \nThe challenges and setbacks along the way are what make the eventual success so rewarding. \nTo anyone still searching, I encourage you to stay positive, keep learning, and trust in your journey. \nThe right opportunity is out there, you need only one \"yes\".","src/content/blog/new-job.mdx","e547acc2f026e5fa","sharded-databases",{"id":66,"data":68,"body":72,"filePath":73,"digest":74,"deferredRender":20},{"title":69,"slug":66,"description":70,"pubDate":71},"Database Sharding: The Smart Way to Scale Big Data","As data grows, and enterprises grow, conventional databases can become a problem. Slow queries, increased downtime, and high operational costs can become a big problem....",["Date","2025-02-01T05:00:00.000Z"],"import WideImage from '../../components/blog/WideImage.astro'\n\n\u003CWideImage>\n  ![Sharding](../../assets/images/blog/2025-02-01/sharding.avif)\n\u003C/WideImage>\n\n\n## Introduction to Sharding\n\nAs data grows, and enterprises grow, conventional databases can become a problem. \nSlow queries, increased downtime, and high operational costs can become a big problem, kind of like trying to find a single sock in a laundry basket full of unmatched pairs. \nBut this is where \u003Cstrong>sharding\u003C/strong> comes in, a healthy approach of dividing a large database into multiple smaller databases also known as \u003Cstrong>shards\u003C/strong>.\n\nSharding is not the same as simple database replication. It does not mean to maintain several copies of the same data, but to \u003Cstrong>divide\u003C/strong> the data into pieces and place them in different locations. \nSo the queries are executed faster and the efficiency of the systems is maintained.\nSocial networks like Facebook, Twitter, and even e-commerce giant Amazon use sharding to handle thousands or even millions of users and maintain the performance of their sites as traffic increases.\n\n## How Sharded Databases Work\n\nAt its core, a sharded database is a collection of smaller databases (shards) that hold a part of the total data. \nThese shards are independent but combined they make one large system. \n\u003Cstrong>A shard key\u003C/strong> is used to decide where the data is stored, it's like having an address that points data in the right direction. \n\n![Courteney Cox Friends](../../assets/images/blog/2025-02-01/that-way.gif)\n\nWe can take a shopping site that uses customer ID as a shard key as an example for this. \nA specific shard is where all of a customer's orders and interactions are stored. \nIn this manner, the system only needs to look at the shard associated with that user, which is much faster, rather than searching \nthrough millions of records when a person wants to sign in and view their purchase history. \nNobody wants to wait thirty seconds for their shopping cart to load, especially when there is a Black Friday sale, right?\n\n## Types of Sharding\n\nThere is no single approach to Sharding. Different businesses are different and thus different approaches can be taken when it comes to sharding a database:\n\n    1. \u003Cstrong>Range-Based Sharding:\u003C/strong> \n        The data is divided based on the range of values. \n        For instance, users with ID between 1 and 10,000 can be placed in one shard and 10,001 - 20,000 in another. \n        The method is quite simple to implement but it has a drawback that some shards may be more populated than others especially if some shards are more prone to high traffic than others.\n        \n        ![Range-Based Sharding](../../assets/images/blog/2025-02-01/range-based-sharding.png)\n\n    2. \u003Cstrong>Hash-Based Sharding:\u003C/strong> \n        A hash function determines the location of data to be stored. \n        This results in a more even data distribution across the shards but at the same time makes it harder to introduce new shards.\n        \n        ![Hash-Based Sharding](../../assets/images/blog/2025-02-01/hash-based-sharding.png)\n\n    3. \u003Cstrong>Directory-Based Sharding:\u003C/strong> \n        A lookup table is used to determine where each piece of data is located. \n        It is the most flexible of the four approaches but the directory can be difficult to manage.\n        \n        ![Directory-Based Sharding](../../assets/images/blog/2025-02-01/directory-based-sharding.png)\n\n## Why Businesses Use Sharding\n\nOne of the primary motives for which organizations embrace sharding is scalability. \nWhen it comes to the size of users, a single database cannot manage all the traffic that is being received. \nSharding enables enterprises to horizontally scale. This means that instead of having to upgrade a single, overburdened server, they can just introduce more database instances. \n \nAnother major benefit is the performance. It is faster because each shard has a copy of the data in fraction of the size. \nIt is like searching for a file in a huge warehouse as opposed to searching for it in a small storage room, there is less to sort through. \nFurthermore, sharding enhances the resilience to failure since if one shard fails, it impacts only a part of the system and not the whole application. \n\n\n## The Downsides of Sharding\n\nYet, sharding is not the end of the problem, it has its issues. \nThe major issue is complexity. Maintaining a database that has been sharded is an exponential increase in complexity. \nDevelopers also have to think carefully about shard keys to avoid performance bottlenecks, and they have to consider cross shard queries which are slow. \n\nAnother issue is rebalancing. Systems grow, some shards will become overloaded while others will be underutilized. \nRebalancing data across shards can be complicated and may entail downtime or extra infrastructure. \nTherefore, companies should use sharding only if other improvements, such as caching, indexing, or replication, are insufficient.\n\n## When Should You Use Sharding?\n\nSharding is most useful in applications that are handling very large  amounts of data and user interactions. \nIf your database is experiencing slow queries, or if you are incurring high storage costs, or even down time, then sharding might be worth considering. \nBut if a system can run without a problem because of caching or indexing then sharding may bring more complexity than it needs.\n\n## Final Thoughts\n\nSharding is a great way for handling large scale and high traffic applications but it is not for everyone. \nBut at the same time, it is worth noting that it improves scalability and performance at the expense of complexity and maintenance.\nTherefore, businesses should carefully assess their needs beforehand and find out if there are other means of achieving the same result \n(such as indexing, caching, or replication) instead of turning to sharding. \n\nIf done  right, sharding can be the lifesaver that enables organizations to future proof their databases, grow with out  sacrificing speed or reliability.\n\n## References\n\n1. MongoDB Documentation. \"Sharding in MongoDB.\" \u003Ca href=\"https://www.mongodb.com/docs/manual/sharding/\">https://www.mongodb.com/docs/manual/sharding\u003C/a>\n2. Citus Data. \"Scaling PostgreSQL with Sharding.\" \u003Ca href=\"https://www.citusdata.com\">https://www.citusdata.com\u003C/a>","src/content/blog/sharded-databases.mdx","52aea0c771a564e1","observer-pattern",{"id":75,"data":77,"body":81,"filePath":82,"assetImports":83,"digest":88,"rendered":89},{"title":78,"slug":75,"description":79,"pubDate":80},"Observer Design Pattern","Think of yourself as a news enthusiast eagerly awaiting updates on your favourite topics. The Observer Pattern smoothly links you (the Observer) to the news platform (the Subject).",["Date","2024-02-18T05:00:00.000Z"],"Think of yourself as a news enthusiast eagerly awaiting updates on your favourite topics. The Observer Pattern smoothly links you (the Observer) to the news platform (the Subject).\n\nIn this blog, we'll dive into understanding this pattern. We'll cover its basics, explore real-world uses, and equip you with the knowledge to wield this powerful design pattern in your projects.\n\n## So, what exactly is the Observer Pattern?\n\nIt's a behavioural design pattern that fosters a \u003Cstrong>one-to-many relationship\u003C/strong> between elements. Essentially, one element, the \u003Cstrong>Subject\u003C/strong>, monitors its own state and keeps a list of dependent elements, the \u003Cstrong>Observers\u003C/strong>. When the Subject's state changes, it notifies all its Observers, keeping them up to date and enabling them to react accordingly.\n\n![Observer Pattern](../../assets/images/blog/2024-02-18/observer-pattern.png)\n\u003Csmall>UML diagram for Observer Pattern (\u003Ca href=\"https://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"noreferrer\">Wikipedia\u003C/a>)\u003C/small>\n\nPicture it as subscribing to a news feed. You don't need to constantly refresh the website; the platform (Subject) automatically delivers updates to you (Observer) whenever there's news. This eliminates the need for constant checking and keeps everyone informed seamlessly.\n\nBut the Observer Pattern isn't just handy for news. It's a versatile tool applicable in various scenarios, from monitoring stock markets to designing user interfaces, ultimately enhancing software development efficiency and adaptability.\n\n## Implementing the Observer Pattern\n\nThe Observer Pattern thrives in TypeScript's strong typing and interface capabilities. Let's build a news publisher-subscriber system to showcase its implementation\n\n### Step 1: Defining the Interfaces\n\nFirst, we'll define interfaces for the Subject and Observer:\n\n```ts\ninterface Subject\u003CT> {\n    registerObserver(observer: Observer\u003CT>): void;\n    unregisterObserver(observer: Observer\u003CT>): void;\n    notifyObservers(data?: T): void;\n}\n\ninterface Observer\u003CT> {\n    update(subject: Subject\u003CT>, data?: T): void;\n}\n\n// used for our example\ninterface Article {\n    topic: string;\n    title: string;\n    content: string;\n}\n```\n\n\u003Cstrong>Subject\u003CT>\u003C/strong> defines the core functionality of a \"source\" object responsible for notifying its dependents.\n\n- `registerObserver(observer: Observer\u003CT>)` adds an Observer to the notification list.\n- `unregisterObserver(observer: Observer\u003CT>)` removes an Observer from the list.\n- `notifyObservers(data?: T)` triggers notifications to all registered Observers, optionally providing data.\n\n\u003Cstrong>Observer\u003CT>\u003C/strong> defines the behaviour of an object that \"listens\" for updates from a Subject.\n\n- `update(subject: Subject\u003CT>, data?: T)` is called by the Subject whenever a change occurs, providing optional data.\n\n### Step 2: Concrete Implementations\n\nNow, let's create concrete classes for a \"NewsPublisher\" (Subject) and \"NewsSubscriber\" (Observer)\n\n```ts title=\"implementation.ts\"\nclass NewsPublisher implements Subject\u003CArticle> {\n    private observers: Observer\u003CArticle>[] = [];\n    \n    name: String = \"\"\n    articles: Article[] = []; // array to store published articles\n\n    constructor(name: String) {\n        this.name = name;\n    }\n\n    registerObserver(observer: Observer\u003CArticle>): void {\n        this.observers.push(observer);\n    }\n\n    unregisterObserver(observer: Observer\u003CArticle>): void {\n        const index = this.observers.indexOf(observer);\n        if (index !== -1) {\n            this.observers.splice(index, 1);\n        }\n    }\n\n    notifyObservers(article?: Article): void {\n        for (const observer of this.observers) {\n            observer.update(this, article);\n        }\n    }\n\n    publishArticle(topic: string, title: string, content: string): void {\n        // Simulate article creation\n        const article = { topic, title, content };\n        articles.push(article)\n        this.notifyObservers(article);\n    }\n\n}\n\nclass NewsSubscriber implements Observer\u003CArticle> {\n    constructor(\n      private readonly name: string, \n      private readonly topics: string[]\n    ) { }\n\n    notify(subject: Subject\u003CArticle>, article?: Article): void {\n        if (subject instanceof NewsPublisher && article) {\n            if (this.topics.includes(article.topic)) {\n                // Simulates the behavior of sending an email\n                console.log(`Hey ${this.name}, There is a new article from ${subject.name} \"${article.topic}\": ${article.title}`);\n            }\n        }\n    }\n\n    subscribe(topic: string): void {\n        this.topics.push(topic);\n    }\n\n    unsubscribe(topic: string): void {\n        const index = this.topics.indexOf(topic);\n        if (index !== -1) {\n            this.topics.splice(index, 1);\n        }\n    }\n}\n```\n\n\u003Cstrong>NewsPublisher\u003C/strong> implements the `Subject\u003CArticle>` interface and manages subscribed news topics.\n\n- Stores a list of `Observer\u003CArticle>` objects (subscribers).\n- `publishArticle` method triggers notifications to relevant subscribers with the new article information.\n- Maintains an `articles` array to store published articles for reference.\n\n\u003Cstrong>NewsSubscriber\u003C/strong> implements the `Observer\u003CArticle>` interface and handles topic-specific updates.\n\n- Stores subscribed topics in the `topics` array.\n- `update` method filters received articles based on its subscribed topics and logs notifications.\n- Includes `subscribe` and `unsubscribe` methods for dynamic topic management.\n\n### Usage\n\n```ts title=\"usage.ts\"\nconst publisher = new NewsPublisher(\"CNN\");\nconst amal = new NewsSubscriber(\"Amal\", [\"sports\", \"technology\"]);\nconst kamal = new NewsSubscriber(\"Kamal\", [\"entertainment\", \"politics\"]);\n\npublisher.registerObserver(amal);\npublisher.registerObserver(kamal);\n\n// Subscriber can subscribe/unsubscribe dynamically\namal.subscribe(\"entertainment\");\nkamal.unsubscribe(\"entertainment\");\n\npublisher.publishArticle(\"sports\", \"Sri Lanka Wins!\", \"...\");\npublisher.publishArticle(\"technology\", \"New iPhone is out!\", \"...\");\npublisher.publishArticle(\"entertainment\", \"Johnny and Amber married again!\", \"...\");\npublisher.publishArticle(\"politics\", \"Mahinda dead!\", \"...\");\n```\n\n\n### Output\n\n```bash\nHey Amal, There is a new article from CNN \"sports\": Sri Lanka Wins!\nHey Amal, There is a new article from CNN \"technology\": New iPhone is out!\nHey Amal, There is a new article from CNN \"entertainment\": Johnny and Amber married again!\nHey Kamal, There is a new article from CNN \"politics\": Mahinda dead!\n\n```\n\n![Surprised Dog](../../assets/images/blog/2024-02-18/surprised-dog.gif)\n\nThis is a simplified example. Use libraries like \u003Ca href=\"https://rxjs.dev/guide/overview\" target=\"_blank\" rel=\"noreferrer\">`RxJS`\u003C/a> for advanced features and real-world scenarios.\n\n## Real-world examples\n\nThe Observer Pattern's versatility shines in various domains, making it an important quality of elegant software design. Let's explore some concrete examples:\n\n1. GUI Updates\n\n   - \u003Cstrong>Spreadsheet Cells:\u003C/strong> When you edit one cell in a spreadsheet, other cells dependent on its value automatically update, demonstrating the Observer Pattern in action. The edited cell acts as the Subject, notifying dependent cells (Observers) of the change, prompting them to recalculate themselves.\n   - \u003Cstrong>Progress Bars:\u003C/strong> Progress bars often represent the state of an ongoing task. By subscribing to updates from the task, the progress bar acts as an Observer, displaying the latest progress information received from the Subject (task).\n\n2. Event Handling\n   - \u003Cstrong>Button Clicks:\u003C/strong> When you click a button, it acts as the Subject, notifying event listeners (Observers) about the click event. These listeners could trigger various actions based on their specific interests, like opening a new window or playing a sound.\n   - \u003Cstrong>Keyboard Strokes:\u003C/strong> Similar to button clicks, key presses notify registered event listeners (Observers) about the pressed key, enabling keyboard shortcuts and interactive features.\n\n![God typing](../../assets/images/blog/2024-02-18/typing.gif)\n\n3. Pub/Sub Systems\n\n   - \u003Cstrong>Messaging Apps:\u003C/strong> Chat platforms like Slack or Discord utilize the Observer Pattern extensively. Channels act as Subjects, notifying subscribed users (Observers) when new messages arrive. This ensures users only receive updates relevant to their subscribed channels.\n   - \u003Cstrong>News Aggregators:\u003C/strong> Services like Feedly allow users to subscribe to various news feeds (Subjects). When new articles are published, the feeds notify their subscribers, enabling them to stay updated on their chosen topics.\n\n4. Interesting Use Cases in Libraries and Frameworks\n   - \u003Cstrong>React's Component State Management:\u003C/strong> In React, components act as Observers, subscribing to changes in their parent component's state. Whenever the parent's state changes, the child components are notified and re-rendered accordingly.\n   - \u003Cstrong>RxJS (Reactive Extensions for JavaScript):\u003C/strong> This popular library heavily leverages the Observer Pattern for reactive programming. Observers subscribe to Observables (Subjects) and receive data streams over time, enabling powerful asynchronous programming models.\n\nThese are just a few examples, and the Observer Pattern has applications in many other areas like data fetching, network monitoring, and collaborative editing. Its power lies in its ability to establish loosely coupled, efficient communication between objects, making it a valuable tool for developers across various domains.\n\n![happy engineers](../../assets/images/blog/2024-02-18/happy-engineers.gif)\n\n## Best Practices\n\n- Keep Subjects and Observers \u003Cstrong>independent\u003C/strong>, minimizing direct dependencies. This promotes flexibility and maintainability.\n- Use \u003Cstrong>interfaces\u003C/strong> to establish contracts for Subjects and Observers, ensuring clarity and consistency.\n- Allow Observers to \u003Cstrong>dynamically subscribe/unsubscribe\u003C/strong> to receive relevant updates.\n- Be mindful of situations where Subjects and Observers indirectly affect each other, leading to infinite loops. Consider \u003Cstrong>breaking circular dependencies\u003C/strong> through design changes.\n- Properly remove Observers from Subject lists to prevent unnecessary references and \u003Cstrong>memory leaks.\u003C/strong>\n- Consider \u003Cstrong>leveraging libraries\u003C/strong> like RxJS (JavaScript), Guava or RxJava (Java) for advanced features and easier implementation.\n\n## Anti-Patterns to Avoid\n\n- Avoid creating a Subject that knows too much about its Observers and their logic. Maintain clear separation of concerns.\n- Overly coupled Subjects and Observers make code less adaptable and harder to maintain. Strive for loosely coupled interactions.\n- Avoid changing the Subject's state within Observer updates. This can lead to unintended side effects and complexities.\n- \u003Cstrong>Don't force-fit\u003C/strong> the Observer Pattern into every situation. Consider alternatives like pub/sub systems for more complex event broadcasting scenarios.\n\n## Conclusion\n\nWe've uncovered the Observer Pattern's secrets, from its basic concepts to practical implementations. It's more than simply Subjects and Observers; it's about creating a smooth flow of information within your software.\n\nAnd for your learning journey:\n\n- Dive deeper with the \u003Ca href=\"https://www.amazon.com/gp/product/0201633612/\" target=\"_blank\" rel=\"noreferrer\">\"Gang of Four\"\u003C/a> Design Patterns book or online resources specific to your language.\n- Experiment with the pattern in different scenarios to solidify your understanding.\n- Share your experiences and insights with the developer community!\n\n\u003Cstrong>Happy Coding!\u003C/strong>","src/content/blog/observer-pattern.md",[84,85,86,87],"../../assets/images/blog/2024-02-18/observer-pattern.png","../../assets/images/blog/2024-02-18/surprised-dog.gif","../../assets/images/blog/2024-02-18/typing.gif","../../assets/images/blog/2024-02-18/happy-engineers.gif","caa9798b6ace8907",{"html":90,"metadata":91},"\u003Cp>Think of yourself as a news enthusiast eagerly awaiting updates on your favourite topics. The Observer Pattern smoothly links you (the Observer) to the news platform (the Subject).\u003C/p>\n\u003Cp>In this blog, we’ll dive into understanding this pattern. We’ll cover its basics, explore real-world uses, and equip you with the knowledge to wield this powerful design pattern in your projects.\u003C/p>\n\u003Ch2 id=\"so-what-exactly-is-the-observerpattern\">So, what exactly is the Observer Pattern?\u003C/h2>\n\u003Cp>It’s a behavioural design pattern that fosters a \u003Cstrong>one-to-many relationship\u003C/strong> between elements. Essentially, one element, the \u003Cstrong>Subject\u003C/strong>, monitors its own state and keeps a list of dependent elements, the \u003Cstrong>Observers\u003C/strong>. When the Subject’s state changes, it notifies all its Observers, keeping them up to date and enabling them to react accordingly.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/blog/2024-02-18/observer-pattern.png&#x22;,&#x22;alt&#x22;:&#x22;Observer Pattern&#x22;,&#x22;index&#x22;:0}\">\n\u003Csmall>UML diagram for Observer Pattern (\u003Ca href=\"https://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"noreferrer\">Wikipedia\u003C/a>)\u003C/small>\u003C/p>\n\u003Cp>Picture it as subscribing to a news feed. You don’t need to constantly refresh the website; the platform (Subject) automatically delivers updates to you (Observer) whenever there’s news. This eliminates the need for constant checking and keeps everyone informed seamlessly.\u003C/p>\n\u003Cp>But the Observer Pattern isn’t just handy for news. It’s a versatile tool applicable in various scenarios, from monitoring stock markets to designing user interfaces, ultimately enhancing software development efficiency and adaptability.\u003C/p>\n\u003Ch2 id=\"implementing-the-observerpattern\">Implementing the Observer Pattern\u003C/h2>\n\u003Cp>The Observer Pattern thrives in TypeScript’s strong typing and interface capabilities. Let’s build a news publisher-subscriber system to showcase its implementation\u003C/p>\n\u003Ch3 id=\"step-1-defining-the-interfaces\">Step 1: Defining the Interfaces\u003C/h3>\n\u003Cp>First, we’ll define interfaces for the Subject and Observer:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.2jitr.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.dy9ns.js\">\u003C/script>\u003Cfigure class=\"frame\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre tabindex=\"0\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">interface\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">T\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">registerObserver\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">T\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">>)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">unregisterObserver\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">T\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">>)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">notifyObservers\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">data\u003C/span>\u003Cspan style=\"--1:#BF3441\">\u003Cspan style=\"--0:#CD89E1\">?\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">:\u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">T\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">interface\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">T\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">update\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">T\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">>, \u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">data\u003C/span>\u003Cspan style=\"--1:#BF3441\">\u003Cspan style=\"--0:#CD89E1\">?\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">:\u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">T\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#9FA3AA;--0fs:italic;--1:#616972\">// used for our example\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">interface\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#AE4B07\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#AE4B07\">title\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#AE4B07\">content\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"interface Subject\u003CT> {    registerObserver(observer: Observer\u003CT>): void;    unregisterObserver(observer: Observer\u003CT>): void;    notifyObservers(data?: T): void;}interface Observer\u003CT> {    update(subject: Subject\u003CT>, data?: T): void;}// used for our exampleinterface Article {    topic: string;    title: string;    content: string;}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Subject\u003Ct>\u003C/t>\u003C/strong> defines the core functionality of a “source” object responsible for notifying its dependents.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>registerObserver(observer: Observer&#x3C;T>)\u003C/code> adds an Observer to the notification list.\u003C/li>\n\u003Cli>\u003Ccode>unregisterObserver(observer: Observer&#x3C;T>)\u003C/code> removes an Observer from the list.\u003C/li>\n\u003Cli>\u003Ccode>notifyObservers(data?: T)\u003C/code> triggers notifications to all registered Observers, optionally providing data.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Observer\u003Ct>\u003C/t>\u003C/strong> defines the behaviour of an object that “listens” for updates from a Subject.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>update(subject: Subject&#x3C;T>, data?: T)\u003C/code> is called by the Subject whenever a change occurs, providing optional data.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"step-2-concrete-implementations\">Step 2: Concrete Implementations\u003C/h3>\n\u003Cp>Now, let’s create concrete classes for a “NewsPublisher” (Subject) and “NewsSubscriber” (Observer)\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">implementation.ts\u003C/span>\u003C/figcaption>\u003Cpre tabindex=\"0\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">class\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">NewsPublisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">implements\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">private\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#AE4B07\">observers\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">>[] \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> [];\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#AE4B07\">name\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">String\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#AE4B07\">articles\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">[] \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> []; \u003C/span>\u003Cspan style=\"--0:#9FA3AA;--0fs:italic;--1:#616972\">// array to store published articles\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">constructor\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">name\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">String\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E6888F\">name\u003C/span>\u003Cspan style=\"--0:#ABB2BF\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\"> \u003C/span>\u003Cspan style=\"--0:#E6888F\">name\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">;\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">registerObserver\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">>)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E5C07B\">observers\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">push\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">unregisterObserver\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">>)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">const\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">index\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E5C07B\">observers\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">indexOf\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">if\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"--0:#E6888F\">index\u003C/span>\u003Cspan style=\"--0:#ABB2BF\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">!==\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">-\u003C/span>\u003Cspan style=\"--0:#D19A66;--1:#005CC5\">1\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E5C07B\">observers\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">splice\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">index\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">, \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D19A66;--1:#005CC5\">1\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">notifyObservers\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">article\u003C/span>\u003Cspan style=\"--1:#BF3441\">\u003Cspan style=\"--0:#CD89E1\">?\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">:\u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">for\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> (\u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">const\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">of\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E6888F\">observers\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">) {\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#24292E\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#24292E\">observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">.\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">update\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">, \u003C/span>\u003Cspan style=\"--0:#E6888F\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">publishArticle\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">title\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">content\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#9FA3AA;--0fs:italic;--1:#616972\">// Simulate article creation\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">const\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\"> { \u003C/span>\u003Cspan style=\"--0:#E6888F\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">, \u003C/span>\u003Cspan style=\"--0:#E6888F\">title\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">, \u003C/span>\u003Cspan style=\"--0:#E6888F\">content\u003C/span>\u003Cspan style=\"--0:#ABB2BF\"> };\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#24292E\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#24292E\">articles\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">.\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">push\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">)\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">.\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">notifyObservers\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">class\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">NewsSubscriber\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">implements\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Observer\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">constructor\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">      \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">private\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">readonly\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">name\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">,\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">      \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">private\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">readonly\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">topics\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">[]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">) { }\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">notify\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">>, \u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">article\u003C/span>\u003Cspan style=\"--1:#BF3441\">\u003Cspan style=\"--0:#CD89E1\">?\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">:\u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">Article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">if\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"--0:#E6888F\">subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">instanceof\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#6F42C1\">NewsPublisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\"> \u003C/span>\u003Cspan style=\"--0:#E6888F\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">) {\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">if\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> (\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E5C07B\">topics\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">includes\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E5C07B\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E6888F\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">)) {\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#9FA3AA;--0fs:italic;--1:#616972\">// Simulates the behavior of sending an email\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#24292E\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#24292E\">console\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">.\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">log\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--1:#032F62\">\u003Cspan style=\"--0:#98C379\">`Hey \u003C/span>\u003Cspan style=\"--0:#CD89E1\">${\u003C/span>\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#032F62\">.\u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#24292E\">name\u003C/span>\u003Cspan style=\"--1:#032F62\">\u003Cspan style=\"--0:#CD89E1\">}\u003C/span>\u003Cspan style=\"--0:#98C379\">, There is a new article from \u003C/span>\u003Cspan style=\"--0:#CD89E1\">${\u003C/span>\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#24292E\">subject\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#032F62\">.\u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#24292E\">name\u003C/span>\u003Cspan style=\"--1:#032F62\">\u003Cspan style=\"--0:#CD89E1\">}\u003C/span>\u003Cspan style=\"--0:#98C379\"> \"\u003C/span>\u003Cspan style=\"--0:#CD89E1\">${\u003C/span>\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#24292E\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#032F62\">.\u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#24292E\">topic\u003C/span>\u003Cspan style=\"--1:#032F62\">\u003Cspan style=\"--0:#CD89E1\">}\u003C/span>\u003Cspan style=\"--0:#98C379\">\": \u003C/span>\u003Cspan style=\"--0:#CD89E1\">${\u003C/span>\u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#24292E\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#032F62\">.\u003C/span>\u003Cspan style=\"--0:#E6888F;--1:#24292E\">title\u003C/span>\u003Cspan style=\"--1:#032F62\">\u003Cspan style=\"--0:#CD89E1\">}\u003C/span>\u003Cspan style=\"--0:#98C379\">`\u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">subscribe\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E5C07B\">topics\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">push\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">unsubscribe\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#E6888F;--0fs:italic;--1:#AE4B07\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">string\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">)\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#BF3441\">:\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">void\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">const\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">index\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E5C07B\">topics\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">indexOf\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">topic\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">if\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"--0:#E6888F\">index\u003C/span>\u003Cspan style=\"--0:#ABB2BF\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">!==\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">-\u003C/span>\u003Cspan style=\"--0:#D19A66;--1:#005CC5\">1\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">this\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003Cspan style=\"--0:#E5C07B\">topics\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">splice\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">index\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">, \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D19A66;--1:#005CC5\">1\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"class NewsPublisher implements Subject\u003CArticle> {    private observers: Observer\u003CArticle>[] = [];    name: String = &#x22;&#x22;    articles: Article[] = []; // array to store published articles    constructor(name: String) {        this.name = name;    }    registerObserver(observer: Observer\u003CArticle>): void {        this.observers.push(observer);    }    unregisterObserver(observer: Observer\u003CArticle>): void {        const index = this.observers.indexOf(observer);        if (index !== -1) {            this.observers.splice(index, 1);        }    }    notifyObservers(article?: Article): void {        for (const observer of this.observers) {            observer.update(this, article);        }    }    publishArticle(topic: string, title: string, content: string): void {        // Simulate article creation        const article = { topic, title, content };        articles.push(article)        this.notifyObservers(article);    }}class NewsSubscriber implements Observer\u003CArticle> {    constructor(      private readonly name: string,      private readonly topics: string[]    ) { }    notify(subject: Subject\u003CArticle>, article?: Article): void {        if (subject instanceof NewsPublisher &#x26;&#x26; article) {            if (this.topics.includes(article.topic)) {                // Simulates the behavior of sending an email                console.log(&#x60;Hey ${this.name}, There is a new article from ${subject.name} &#x22;${article.topic}&#x22;: ${article.title}&#x60;);            }        }    }    subscribe(topic: string): void {        this.topics.push(topic);    }    unsubscribe(topic: string): void {        const index = this.topics.indexOf(topic);        if (index !== -1) {            this.topics.splice(index, 1);        }    }}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>NewsPublisher\u003C/strong> implements the \u003Ccode>Subject&#x3C;Article>\u003C/code> interface and manages subscribed news topics.\u003C/p>\n\u003Cul>\n\u003Cli>Stores a list of \u003Ccode>Observer&#x3C;Article>\u003C/code> objects (subscribers).\u003C/li>\n\u003Cli>\u003Ccode>publishArticle\u003C/code> method triggers notifications to relevant subscribers with the new article information.\u003C/li>\n\u003Cli>Maintains an \u003Ccode>articles\u003C/code> array to store published articles for reference.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>NewsSubscriber\u003C/strong> implements the \u003Ccode>Observer&#x3C;Article>\u003C/code> interface and handles topic-specific updates.\u003C/p>\n\u003Cul>\n\u003Cli>Stores subscribed topics in the \u003Ccode>topics\u003C/code> array.\u003C/li>\n\u003Cli>\u003Ccode>update\u003C/code> method filters received articles based on its subscribed topics and logs notifications.\u003C/li>\n\u003Cli>Includes \u003Ccode>subscribe\u003C/code> and \u003Ccode>unsubscribe\u003C/code> methods for dynamic topic management.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"usage\">Usage\u003C/h3>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">usage.ts\u003C/span>\u003C/figcaption>\u003Cpre tabindex=\"0\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">const\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">publisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">new\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">NewsPublisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"CNN\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">const\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">amal\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">new\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">NewsSubscriber\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"Amal\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, [\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"sports\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"technology\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">]);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">const\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#E5C07B;--1:#005CC5\">kamal\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#56B6C2;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#CD89E1;--1:#BF3441\">new\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">NewsSubscriber\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"Kamal\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, [\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"entertainment\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"politics\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">]);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">publisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">registerObserver\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">amal\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">publisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">registerObserver\u003C/span>\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#ABB2BF\">(\u003C/span>\u003Cspan style=\"--0:#E6888F\">kamal\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#9FA3AA;--0fs:italic;--1:#616972\">// Subscriber can subscribe/unsubscribe dynamically\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">amal\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">subscribe\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"entertainment\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">kamal\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">unsubscribe\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"entertainment\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">publisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">publishArticle\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"sports\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"Sri Lanka Wins!\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"...\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">publisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">publishArticle\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"technology\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"New iPhone is out!\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"...\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">publisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">publishArticle\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"entertainment\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"Johnny and Amber married again!\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"...\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--1:#24292E\">\u003Cspan style=\"--0:#E5C07B\">publisher\u003C/span>\u003Cspan style=\"--0:#ABB2BF\">.\u003C/span>\u003C/span>\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">publishArticle\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"politics\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"Mahinda dead!\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"...\"\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"const publisher = new NewsPublisher(&#x22;CNN&#x22;);const amal = new NewsSubscriber(&#x22;Amal&#x22;, [&#x22;sports&#x22;, &#x22;technology&#x22;]);const kamal = new NewsSubscriber(&#x22;Kamal&#x22;, [&#x22;entertainment&#x22;, &#x22;politics&#x22;]);publisher.registerObserver(amal);publisher.registerObserver(kamal);// Subscriber can subscribe/unsubscribe dynamicallyamal.subscribe(&#x22;entertainment&#x22;);kamal.unsubscribe(&#x22;entertainment&#x22;);publisher.publishArticle(&#x22;sports&#x22;, &#x22;Sri Lanka Wins!&#x22;, &#x22;...&#x22;);publisher.publishArticle(&#x22;technology&#x22;, &#x22;New iPhone is out!&#x22;, &#x22;...&#x22;);publisher.publishArticle(&#x22;entertainment&#x22;, &#x22;Johnny and Amber married again!&#x22;, &#x22;...&#x22;);publisher.publishArticle(&#x22;politics&#x22;, &#x22;Mahinda dead!&#x22;, &#x22;...&#x22;);\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Ch3 id=\"output\">Output\u003C/h3>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame is-terminal\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">\u003C/span>\u003Cspan class=\"sr-only\">Terminal window\u003C/span>\u003C/figcaption>\u003Cpre tabindex=\"0\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">Hey\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Amal,\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">There\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">is\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">a\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">new\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">from\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">CNN\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"sports\":\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Sri\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Lanka\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Wins!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">Hey\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Amal,\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">There\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">is\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">a\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">new\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">from\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">CNN\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"technology\":\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">New\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">iPhone\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">is\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">out!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">Hey\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Amal,\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">There\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">is\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">a\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">new\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">from\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">CNN\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"entertainment\":\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Johnny\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">and\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Amber\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">married\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">again!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#61AFEF;--1:#6F42C1\">Hey\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Kamal,\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">There\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">is\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">a\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">new\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">article\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">from\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">CNN\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">\"politics\":\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">Mahinda\u003C/span>\u003Cspan style=\"--0:#ABB2BF;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#98C379;--1:#032F62\">dead!\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Hey Amal, There is a new article from CNN &#x22;sports&#x22;: Sri Lanka Wins!Hey Amal, There is a new article from CNN &#x22;technology&#x22;: New iPhone is out!Hey Amal, There is a new article from CNN &#x22;entertainment&#x22;: Johnny and Amber married again!Hey Kamal, There is a new article from CNN &#x22;politics&#x22;: Mahinda dead!\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/blog/2024-02-18/surprised-dog.gif&#x22;,&#x22;alt&#x22;:&#x22;Surprised Dog&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This is a simplified example. Use libraries like \u003Ca href=\"https://rxjs.dev/guide/overview\" target=\"_blank\" rel=\"noreferrer\">\u003Ccode>RxJS\u003C/code>\u003C/a> for advanced features and real-world scenarios.\u003C/p>\n\u003Ch2 id=\"real-world-examples\">Real-world examples\u003C/h2>\n\u003Cp>The Observer Pattern’s versatility shines in various domains, making it an important quality of elegant software design. Let’s explore some concrete examples:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>GUI Updates\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Spreadsheet Cells:\u003C/strong> When you edit one cell in a spreadsheet, other cells dependent on its value automatically update, demonstrating the Observer Pattern in action. The edited cell acts as the Subject, notifying dependent cells (Observers) of the change, prompting them to recalculate themselves.\u003C/li>\n\u003Cli>\u003Cstrong>Progress Bars:\u003C/strong> Progress bars often represent the state of an ongoing task. By subscribing to updates from the task, the progress bar acts as an Observer, displaying the latest progress information received from the Subject (task).\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Event Handling\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Button Clicks:\u003C/strong> When you click a button, it acts as the Subject, notifying event listeners (Observers) about the click event. These listeners could trigger various actions based on their specific interests, like opening a new window or playing a sound.\u003C/li>\n\u003Cli>\u003Cstrong>Keyboard Strokes:\u003C/strong> Similar to button clicks, key presses notify registered event listeners (Observers) about the pressed key, enabling keyboard shortcuts and interactive features.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/blog/2024-02-18/typing.gif&#x22;,&#x22;alt&#x22;:&#x22;God typing&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>\n\u003Cp>Pub/Sub Systems\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Messaging Apps:\u003C/strong> Chat platforms like Slack or Discord utilize the Observer Pattern extensively. Channels act as Subjects, notifying subscribed users (Observers) when new messages arrive. This ensures users only receive updates relevant to their subscribed channels.\u003C/li>\n\u003Cli>\u003Cstrong>News Aggregators:\u003C/strong> Services like Feedly allow users to subscribe to various news feeds (Subjects). When new articles are published, the feeds notify their subscribers, enabling them to stay updated on their chosen topics.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Interesting Use Cases in Libraries and Frameworks\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>React’s Component State Management:\u003C/strong> In React, components act as Observers, subscribing to changes in their parent component’s state. Whenever the parent’s state changes, the child components are notified and re-rendered accordingly.\u003C/li>\n\u003Cli>\u003Cstrong>RxJS (Reactive Extensions for JavaScript):\u003C/strong> This popular library heavily leverages the Observer Pattern for reactive programming. Observers subscribe to Observables (Subjects) and receive data streams over time, enabling powerful asynchronous programming models.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>These are just a few examples, and the Observer Pattern has applications in many other areas like data fetching, network monitoring, and collaborative editing. Its power lies in its ability to establish loosely coupled, efficient communication between objects, making it a valuable tool for developers across various domains.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/blog/2024-02-18/happy-engineers.gif&#x22;,&#x22;alt&#x22;:&#x22;happy engineers&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Cul>\n\u003Cli>Keep Subjects and Observers \u003Cstrong>independent\u003C/strong>, minimizing direct dependencies. This promotes flexibility and maintainability.\u003C/li>\n\u003Cli>Use \u003Cstrong>interfaces\u003C/strong> to establish contracts for Subjects and Observers, ensuring clarity and consistency.\u003C/li>\n\u003Cli>Allow Observers to \u003Cstrong>dynamically subscribe/unsubscribe\u003C/strong> to receive relevant updates.\u003C/li>\n\u003Cli>Be mindful of situations where Subjects and Observers indirectly affect each other, leading to infinite loops. Consider \u003Cstrong>breaking circular dependencies\u003C/strong> through design changes.\u003C/li>\n\u003Cli>Properly remove Observers from Subject lists to prevent unnecessary references and \u003Cstrong>memory leaks.\u003C/strong>\u003C/li>\n\u003Cli>Consider \u003Cstrong>leveraging libraries\u003C/strong> like RxJS (JavaScript), Guava or RxJava (Java) for advanced features and easier implementation.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"anti-patterns-toavoid\">Anti-Patterns to Avoid\u003C/h2>\n\u003Cul>\n\u003Cli>Avoid creating a Subject that knows too much about its Observers and their logic. Maintain clear separation of concerns.\u003C/li>\n\u003Cli>Overly coupled Subjects and Observers make code less adaptable and harder to maintain. Strive for loosely coupled interactions.\u003C/li>\n\u003Cli>Avoid changing the Subject’s state within Observer updates. This can lead to unintended side effects and complexities.\u003C/li>\n\u003Cli>\u003Cstrong>Don’t force-fit\u003C/strong> the Observer Pattern into every situation. Consider alternatives like pub/sub systems for more complex event broadcasting scenarios.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>We’ve uncovered the Observer Pattern’s secrets, from its basic concepts to practical implementations. It’s more than simply Subjects and Observers; it’s about creating a smooth flow of information within your software.\u003C/p>\n\u003Cp>And for your learning journey:\u003C/p>\n\u003Cul>\n\u003Cli>Dive deeper with the \u003Ca href=\"https://www.amazon.com/gp/product/0201633612/\" target=\"_blank\" rel=\"noreferrer\">“Gang of Four”\u003C/a> Design Patterns book or online resources specific to your language.\u003C/li>\n\u003Cli>Experiment with the pattern in different scenarios to solidify your understanding.\u003C/li>\n\u003Cli>Share your experiences and insights with the developer community!\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Happy Coding!\u003C/strong>\u003C/p>",{"headings":92,"imagePaths":125,"frontmatter":126},[93,97,100,104,107,110,113,116,119,122],{"depth":94,"slug":95,"text":96},2,"so-what-exactly-is-the-observerpattern","So, what exactly is the Observer Pattern?",{"depth":94,"slug":98,"text":99},"implementing-the-observerpattern","Implementing the Observer Pattern",{"depth":101,"slug":102,"text":103},3,"step-1-defining-the-interfaces","Step 1: Defining the Interfaces",{"depth":101,"slug":105,"text":106},"step-2-concrete-implementations","Step 2: Concrete Implementations",{"depth":101,"slug":108,"text":109},"usage","Usage",{"depth":101,"slug":111,"text":112},"output","Output",{"depth":94,"slug":114,"text":115},"real-world-examples","Real-world examples",{"depth":94,"slug":117,"text":118},"best-practices","Best Practices",{"depth":94,"slug":120,"text":121},"anti-patterns-toavoid","Anti-Patterns to Avoid",{"depth":94,"slug":123,"text":124},"conclusion","Conclusion",[84,85,86,87],{"title":78,"slug":75,"description":79,"pubDate":127},"Feb 18 2024","singleton-pattern",{"id":128,"data":130,"body":134,"filePath":135,"digest":136,"deferredRender":20},{"title":131,"slug":128,"description":132,"pubDate":133},"Understanding the Singleton Pattern & when to use it, or do we really need to?","In this article, we will dive into understanding what the Singleton Pattern is and lets check whether its really worth it...",["Date","2024-02-07T05:00:00.000Z"],"import WideImage from '../../components/blog/WideImage.astro'\n \nIn this article, we will dive into understanding what the Singleton Pattern is and let's check whether it's\nreally worth it. We will be using C# as our main language to give you examples because (insert something funny).\n\n## So, what exactly is Singleton Pattern?\n\nLet's imagine you're working on a project where you need just one copy of a class, accessible from anywhere in\nyour code. That's what the Singleton Pattern is all about; ensuring there's only one instance of a class in\ncharge of a specific task. This way, you maintain order and prevent chaos by avoiding duplicate instances and\nconflicting operations.\n\n![There can be only one... initialization](../../assets/images/blog/2024-02-07/singleton-meme-some-hero.webp)\n\nSingleton Pattern is one of the simplest design patterns and probably the most widely used design pattern.\nSometimes it is used in scenarios where it is not required. In such cases, the disadvantages of using it\noutweighs the advantages what it provides.\n\n## But why would we need such a pattern?\n\nTake managing a database connection or overseeing access to a shared resource like a logging system or a\nconfiguration manager as examples. Having multiple instances in these scenarios could spell trouble, leading to\nwasted resources or messy outcomes.\n\nEnough with the theory, let's look into a real-world scenario in C# where we apply the Singleton Pattern.\n\nWe have a class named `DBManager`, tasked with handling database connections across our application.\nIt's crucial to have just one `DBManager` instance to avoid resource wastage and potential connection\nissues.\n\n```cs title=\"DBManager.cs\"\npublic class DBManager\n{\n    private static DBManager instance;\n    \n    private DBManager() { }\n    \n    public static DBManager Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n               instance = new DBManager();\n            }\n                \n            return instance;\n        }\n    }\n    public void Connect()\n    {\n        // Implementation to establish a database connection\n    }\n    public void Disconnect()\n    {\n        // Implementation to close the database connection\n    }\n}\n```\n\nThe `DBManager` class keeps its constructor private so that there's no external initialization. The\n`Instance` property is in charge of managing the singleton instance. We provide the access for our instance by setting it\nup as a static property. Whenever we need to deal with the database in our app we just need to make quick call\nwith `DBManager.Instance.Connect()` to gets us connected, and\n`DBManager.Instance.Disconnect()` tidies things up when we're done. It's a straightforward way to\nkeep our database tasks consistent and smooth across the application.\n\nWe can see that this pattern addresses two problems.\n\n1. Ensure that a class has just a single instance.\n2. Provide a global access point to that instance.\n\nHowever, it's actually not as nice as it sounds, which is why I believe the Singleton pattern is often\nconsidered problematic or 'evil'.\n\n## What's the issue with Global Instances?\n\nHmm, global access? So now everyone can access it? 🤔\n\n![A friends meme](../../assets/images/blog/2024-02-07/singleton-meme-friends.webp)\n\nThe Singleton Pattern can be a \u003Cstrong>double-edged sword\u003C/strong> when it comes to global instances. While it\noffers a convenient way to manage single instances of classes, it also presents us some challenges.\n\n1. With global access to a single instance, different parts of your code become tightly coupled with it. This\n   means changes to the singleton class can ripple throughout your codebase, making maintenance more complicated.\n   I bet you won't need that when you approach a release date.\n2. By using global instances, You hide your application's dependencies in your code instead of exposing them\n   through the interfaces and injecting them wherever is needed. This will decrease testability and flexibility\n   while increasing complexity and difficulty in debugging.\n3. Testing code reliant on global singletons is tough. The hidden dependencies and tight coupling make it tricky\n   to isolate and test components independently.\n4. As your codebase grows, the rigidness of global singletons can limit scalability. Refactoring or adding new\n   features becomes more challenging.\n\nI remember my father once said,\n\n> Avoid using global variables or instances, son.\n\nMaybe he knew I would reach this stage someday. :>\n\n## Violation Of SOLID Principles\n\nLet's see how the Singleton Pattern cost us when held up to SOLID principles. It's pretty bad actually.\n\n### Single Responsibility Principle (SRP)\n\nThe Singleton Pattern's primary responsibility is to ensure a single instance of a class. However, it often\ntakes on additional responsibilities, such as managing global state or serving as a global access point.\n\nWhen several threads request access to one instance; singleton should take responsibility for dispatching data\nto each request in threads by using locks to prevent \u003Cstrong>Race-Condition\u003C/strong> or handling read and write\nto deliver valid data.\n\nThis is just the beginning. As time goes by, new responsibilities will be added to the singleton. You end up\nwith a class that nearly does anything. This violates the SRP by causing the class to have multiple reasons to\nchange.\n\n### Open/Closed Principle (OCP)\n\nThe Singleton Pattern can be challenging to extend or modify without altering its core implementation. Since the\nclass controls its own instantiation, making changes to accommodate new requirements can be tricky without\nmodifying the class directly.\n\nA class needs to allow inheritance in order to qualify as “open”. Inheritance is an “is-a” relationship. Because\nof the “is-a” relationship, instances of the child class are also instances of the parent class if you inherit\nfrom a singleton class. This means that you may end up with numerous instances of the singleton class.\n\nIf a singleton class prevents inheritance, it is no longer “open”; however, if a singleton class allows\ninheritance, it is “open” for extension, and it can no longer follow the singleton pattern.\n\n### Dependency Inversion Principle (DIP)\n\nAccording to the \u003Ca href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\" target=\"_blank\"  rel=\"noreferrer\"  >Wikipedia article\u003C/a>,\n\n> In object-oriented design, the dependency inversion principle is a specific methodology for loosely coupled software modules\n\nBut the Singleton Pattern introduces high coupling between components that rely on the singleton instance. This\ncan make it challenging to adhere to the DIP, as components become tightly bound to the Singleton class, making\nit difficult to substitute dependencies or adhere to dependency injection principles.\n\n\u003Chr />\n\n## TL;DR:\n\nThe Singleton Pattern ensures there's only one instance of a class, accessible globally, but it's a mixed bag.\nWhile the Singleton Pattern can be a useful tool, it's essential to be mindful of its potential to violate SOLID\nprinciples, particularly concerning single responsibility and dependency inversion. Careful design and\nconsideration are necessary to mitigate these risks and maintain a clean and flexible codebase.\n\n\u003CWideImage>\n  ![A singleton pattern meme](../../assets/images/blog/2024-02-07/singleton-meme.webp)\n\u003C/WideImage>","src/content/blog/singleton-pattern.mdx","50b3862e4477bdfa","rowversioning",{"id":137,"data":139,"body":143,"filePath":144,"digest":145,"deferredRender":20},{"title":140,"slug":137,"description":141,"pubDate":142},"Implementing RowVersioning with ETag and If-Match Headers in EF Core","Managing data consistency is key in applications where multiple users interact with the same data. In web apps, you might have seen ETag and If-Match headers alongside a technique called RowVersioning to handle these situations...",["Date","2024-07-19T04:00:00.000Z"],"During my interview today, the interviewer asked about a challenge I faced in a past project. I immediately thought of a project where I implemented RowVersioning a few years ago. \nMy team lead in Norway even suggested I write a blog post about it at the time. However, I was heavily focused on my plans to immigrate to Canada and it completely slipped my mind. \nSo today, I'm going to fulfill my promise.\n\nManaging data consistency is key in applications where multiple users interact with the same data. \nIn web apps, you might have seen ETag and If-Match headers alongside a technique called RowVersioning to handle these situations. \nLet's break down how RowVersioning works with these headers and how you can use this in EF Core.\n\n## What is RowVersioning?\n\nRowVersioning is a method for tracking changes to data in a database when multiple users might be making updates at the same time. \nEssentially, it uses a version number or timestamp that updates every time a row changes. \nWhen you try to update a row, EF Core checks if the version number in the database matches the one you have. \nIf they match, your update goes through. If not, it means someone else has made changes since you last saw it, and you'll get a concurrency conflict.\n\n\n## What are ETag and If-Match Headers?\n\nAn ETag (Entity Tag) is a unique identifier that represents a specific version of a resource. \nIt's included in the HTTP response headers and helps clients keep track of changes.\n\nThe If-Match header comes into play when you're making HTTP requests. \nIt allows you to make your request conditional by including the ETag value you've received earlier. \nThe server will only process your request if the current ETag matches the one you've provided. \nThis helps prevent issues where updates might be lost or conflicts arise because of simultaneous changes.\n\n## Why Use ETag and If-Match Headers?\n\nUsing ETag and If-Match headers together with RowVersioning gives you a solid way to handle data conflicts in web applications. \nIt ensures that your updates are applied only if the data hasn't been modified since you last checked, helping you avoid overwriting someone else's changes and keeping your data consistent.\n\n## Implementation\n\nThis is a production-ready implementation. I'm going to use a custom attribute to do all the dirty work. So, let's go through it step by step and get our hands dirty.\n\n1. Add a RowVersion Property to Your Entity\n    Define a property in your entity class to store the version number or timestamp. This property should be of type `byte[]`.\n\n    ```cs\n    public class RowVersionBase\n    {\n        public byte[] RowVersion { get; set; } = null!;\n    }\n\n    public class User : RowVersionBase\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Email { get; set; }\n        public Role Role { get; set; }\n\n        [JsonIgnore]\n        public string PasswordHash { get; set; }\n    }\n    ```\n2. Configure the RowVersion Property in the DbContext\n    In your `DbContext` class, configure the `RowVersion` property using the Fluent API.\n\n    ```cs\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        builder.Entity\u003CUser>()\n            .Property(x => x.RowVersion)\n            .IsRowVersion();\n    }\n    ```\n3. Include ETag in HTTP Responses\n    When returning an entity in an HTTP response, include the ETag header. The ETag value can be the base64-encoded RowVersion property.\n\n    In my solution, I have a scoped service called `ChangeContext` to store the RowVersion value. \n    I will later collect the RowVersion value from that service and assign it to the response headers using an custom `ActionFilterAttribute`. \n\n    ```cs title=\"UserService.cs\" {7}\n    public async Task\u003CUserResponseViewModel> GetById(int id, CancellationToken cancellationToken)\n    {\n        var user = await GetUser(id, cancellationToken);\n\n        var userVm = _mapper.Map\u003CUserResponseViewModel>(user);\n\n        _changeContext.RowVersion = user.RowVersion;\n\n        return userVm;\n    }\n    ```\n \n    ```cs  title=\"UseOptimisticConcurrencyAttribute.cs\" {12}\n    const string ETAG_HEADER = \"ETag\";\n\n    public UseOptimisticConcurrencyFilter(ChangeContext changeContext)\n    {\n        this.changeContext = changeContext;\n    }\n\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n        if (changeContext.RowVersion != null && context.HttpContext.Request.Method.Equals(HttpMethod.Get.Method))\n        {\n            context.HttpContext.Response.Headers.Add(ETAG_HEADER, Convert.ToBase64String(changeContext.RowVersion));\n        }\n    }\n    ```\n\n4. Handle If-Match Header in HTTP Requests\n\n    When processing update requests, check the If-Match header to ensure the resource has not been modified. \n    If the If-Match header is not present when called the API, return a 428 Precondition Required response.\n    If the ETag values do not match, return a 412 Precondition Failed response.\n\n    \n    ```cs title=\"UseOptimisticConcurrencyAttribute.cs\" ins={2, 9-30, 39-43}\n    const string ETAG_HEADER = \"ETag\";\n    const string MATCH_HEADER = \"If-Match\";\n\n    public UseOptimisticConcurrencyFilter(ChangeContext changeContext)\n    {\n        this.changeContext = changeContext;\n    }\n\n    public void OnActionExecuting(ActionExecutingContext context)\n    {\n        var method = context.HttpContext.Request.Method;\n        if (method.Equals(HttpMethod.Post.Method) || method.Equals(HttpMethod.Put.Method))\n        {\n            if (context.HttpContext.Request.Headers.ContainsKey(MATCH_HEADER))\n            {\n                try\n                {\n                    changeContext.RowVersion = Convert.FromBase64String(context.HttpContext.Request.Headers[MATCH_HEADER]);\n                }\n                catch (FormatException)\n                {\n                    context.Result = new StatusCodeResult(StatusCodes.Status428PreconditionRequired);\n                }\n            }\n            else\n            {\n                context.Result = new StatusCodeResult(StatusCodes.Status428PreconditionRequired);\n            }\n        }\n    }\n    \n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n        if (changeContext.RowVersion != null && context.HttpContext.Request.Method.Equals(HttpMethod.Get.Method))\n        {\n            context.HttpContext.Response.Headers.Add(ETAG_HEADER, Convert.ToBase64String(changeContext.RowVersion));\n        }\n\n        if (context.Exception is DbUpdateConcurrencyException)\n        {\n            context.Result = new StatusCodeResult(StatusCodes.Status412PreconditionFailed);\n            context.ExceptionHandled = true;\n        }\n    }\n    ```\n\n\n## Conclusion\n\nCombining RowVersioning with ETag and If-Match headers is a powerful approach for managing concurrency in web applications with EF Core.\nBy using ETag to keep track of resource versions and If-Match to make sure updates only go through if the resource hasn't been changed, you can avoid losing updates and keep your data consistent. \nImplementing these techniques in your .NET Core apps will make them more reliable and improve the overall experience for your users.\n\nYou can find the prototype project I've developed to  experiment with RowVersioning in my [GitHub repo](https://github.com/LasithaPrabodha/concurrency-handling/).\n\nThank you for reading! :)","src/content/blog/rowversioning.mdx","b84fd554d481e7ad","personal-projects",["Map",148,149,168,169,183,184,198,199,211,212,224,225,238,239,252,253],"dots-connect",{"id":148,"data":150,"filePath":166,"digest":167},{"id":101,"title":151,"description":152,"technologies":153,"links":157},"Dots Connect","This is a small, dynamic two-player game (with AI or another player) where you compete to connect dots of the same color on a grid. It features a minimal AI that demonstrates fundamental AI capabilities.",[154,155,156],"JavaScript","HTML","CSS",[158,162],{"href":159,"ariaLabel":160,"icon":161},"https://lasithaprabodha.github.io/dot-connect","live preview","external",{"href":163,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/dot-connect","source code","github","src/content/personal-projects/dots-connect.yml","39bc778c563943d7","angular-deferred",{"id":168,"data":170,"filePath":181,"digest":182},{"id":171,"title":172,"description":173,"technologies":174,"links":176},6,"Angular Deferred Views App","Application to demonstrate the use cases of Angular Deferred Views with source code.",[175],"Angular",[177,179],{"href":178,"ariaLabel":160,"icon":161},"https://lasithaprabodha.github.io/angular-deferred-views/about",{"href":180,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/angular-deferred-views","src/content/personal-projects/angular-deferred.yml","1b4acef4c785669b","expense-tracker",{"id":183,"data":185,"filePath":196,"digest":197},{"id":186,"title":187,"description":188,"technologies":189,"links":193},5,"Expense Tracking App","A simple expense-tracking app built with a minimal design.",[190,191,192],"React Native","Firebase","Redux",[194],{"href":195,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/expense-tracking-app-rn","src/content/personal-projects/expense-tracker.yml","d71fa73e2d03ffe3","jeopardy-game",{"id":198,"data":200,"filePath":209,"digest":210},{"id":94,"title":201,"description":202,"technologies":203,"links":204},"Jeopardy Game","A Jeopardy game built with vanilla JavaScript (without external libraries) as a simple single-page application (SPA) utilizing a Redux store for state management",[154,155,156],[205,207],{"href":206,"ariaLabel":160,"icon":161},"https://lasithaprabodha.github.io/jeopardy-app",{"href":208,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/jeopardy-app","src/content/personal-projects/jeopardy-game.yml","90e18fba54ce616e","account-balance-viewer",{"id":211,"data":213,"filePath":222,"digest":223},{"id":94,"title":214,"description":215,"technologies":216,"links":219},"Account Balance Viewer","A web application designed to provide a monthly overview of account balances. It demonstrates the use of the Unit of Work pattern, RBAC, JWT authentication, and Xunit for unit testing",[175,217,218],".NET","C#",[220],{"href":221,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/account-balance","src/content/personal-projects/account-balance-viewer.yml","6bea0df02783090b","the-kingsburry",{"id":224,"data":226,"filePath":236,"digest":237},{"id":227,"title":228,"description":229,"technologies":230,"links":231},8,"The Kingsbury (a concept site)","A mobile-first and user-friendly website for a luxurious apartment",[154,155,156],[232,234],{"href":233,"ariaLabel":160,"icon":161},"https://lasithaprabodha.github.io/hotel-website/",{"href":235,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/hotel-website","src/content/personal-projects/the-kingsburry.yml","2123b69bd39f81ad","website",{"id":238,"data":240,"filePath":250,"digest":251},{"id":241,"title":242,"description":243,"technologies":244,"links":247},7,"Personal Website (lasitha.dev)","Built with Astro & Tailwind CSS, this mobile-friendly static website offers smooth transitions and leverages Astro DB for dynamic content",[245,246],"Astro","TailwindCSS",[248],{"href":249,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/lasitha.dev","src/content/personal-projects/website.yml","56525ddb906ca604","watch-ur-network",{"id":252,"data":254,"filePath":272,"digest":273},{"id":255,"title":256,"description":257,"technologies":258,"links":267},4,"Watch Your Network","An example of a scalable Angular web application that visualizes friend network statistics on interactive grids and graphs. This project demonstrates the use of Nx, NgRx, Storybook, Jest, and Cypress",[175,259,260,261,262,263,264,265,266],"NgRx","Angular Material","NgxCharts","D3","Nx","Storybook","Cypress","Jest",[268,270],{"href":269,"ariaLabel":160,"icon":161},"https://lasithaprabodha.github.io/watch-ur-network",{"href":271,"ariaLabel":164,"icon":165},"https://github.com/LasithaPrabodha/watch-ur-network","src/content/personal-projects/watch-ur-network.yml","65404768cc9c4acd","professional-projects",["Map",276,277,287,288,299,300,317,318,329,330],"99x",{"id":276,"data":278,"filePath":285,"digest":286},{"id":255,"title":276,"position":279,"description":280,"technologies":281,"links":282},"Associate Tech Lead","Contributed to Angular-based web app development for SuperOffice, a European cloud B2B CRM. This application contains a set of self-serve tools that developers can use to manage their access to SuperOffice Online APIs.",[175,217,218],[283],{"href":284,"ariaLabel":238,"icon":161},"https://docs.superoffice.com/en/developer-portal/about.html","src/content/professional-projects/99x.yml","185d80fcb50b2e37","creative",{"id":287,"data":289,"filePath":297,"digest":298},{"id":101,"title":290,"position":291,"description":292,"technologies":293,"links":294},"Creative Software","Senior Software Engineer","Contributed to hospitality ERP software called Cenium. This software streamlines complex hotel group bookings with a versatile and dynamic PMS solution.",[175,217,218],[295],{"href":296,"ariaLabel":238,"icon":161},"https://www.cenium.com/pms","src/content/professional-projects/creative.yml","5e4d9334b1353426","findmyfare",{"id":299,"data":301,"filePath":315,"digest":316},{"id":302,"title":303,"position":304,"description":305,"technologies":306,"links":311},1,"Findmyfare.com","Software Engineer","Collaboratively developed and deployed web applications using Laravel and Angular for an online travel platform.",[307,308,309,175,154,310],"PHP","Laravel","AngularJS","TypeScript",[312],{"href":313,"ariaLabel":314,"icon":161},"https://findmyfare.com/","wesbite","src/content/professional-projects/findmyfare.yml","2b709897e5d35034","laudi",{"id":317,"data":319,"filePath":327,"digest":328},{"id":186,"title":320,"position":321,"description":322,"technologies":323,"links":324},"Laudi AS","Full-Stack Developer","Enhanced the user experience by developing new features for Club Arena, a comprehensive football field management system. It simplifies finding available football fields nearby and notifies users when fields become available or are fully booked.",[175,217,218],[325],{"href":326,"ariaLabel":238,"icon":161},"https://laudi.no/","src/content/professional-projects/laudi.yml","af84490f67f306fa","villvay",{"id":329,"data":331,"filePath":340,"digest":341},{"id":94,"title":332,"position":304,"description":333,"technologies":334,"links":337},"Villvay Systems","Developed innovative React Native and Flutter applications, and revamped e-commerce websites using ReactJS with Redux and Vanilla JavaScript for tech start-ups based in the US.",[335,190,154,310,336],"React","Flutter",[338],{"href":339,"ariaLabel":314,"icon":161},"https://villvay.com/","src/content/professional-projects/villvay.yml","42912a35b2a4c0f8","skills",["Map",344,345,349,350,352,353,355,356,359,360,362,363,365,366,369,370,373,374,378,379,383,384,388,389,393,394,397,398,402,403,407,408,412,413,416,417],"1",{"id":344,"data":346,"filePath":348},{"id":302,"name":347},"Typescript","src/content/skills/tech-skills.json","2",{"id":349,"data":351,"filePath":348},{"id":94,"name":175},"3",{"id":352,"data":354,"filePath":348},{"id":101,"name":335},"4",{"id":355,"data":357,"filePath":348},{"id":255,"name":358},"Vue.js","5",{"id":359,"data":361,"filePath":348},{"id":186,"name":190},"6",{"id":362,"data":364,"filePath":348},{"id":171,"name":192},"7",{"id":365,"data":367,"filePath":348},{"id":241,"name":368},"Kotlin","8",{"id":369,"data":371,"filePath":348},{"id":227,"name":372},"Swift","9",{"id":373,"data":375,"filePath":348},{"id":376,"name":377},9,"ASP.NET Core","10",{"id":378,"data":380,"filePath":348},{"id":381,"name":382},10,"Node.js","12",{"id":383,"data":385,"filePath":348},{"id":386,"name":387},12,"Azure","13",{"id":388,"data":390,"filePath":348},{"id":391,"name":392},13,"SQL","14",{"id":393,"data":395,"filePath":348},{"id":396,"name":191},14,"15",{"id":397,"data":399,"filePath":348},{"id":400,"name":401},15,"Docker","16",{"id":402,"data":404,"filePath":348},{"id":405,"name":406},16,"SASS","17",{"id":407,"data":409,"filePath":348},{"id":410,"name":411},17,"Bootstrap","18",{"id":412,"data":414,"filePath":348},{"id":415,"name":246},18,"19",{"id":416,"data":418,"filePath":348},{"id":419,"name":266},19]