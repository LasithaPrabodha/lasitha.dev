---
import Page from "@layouts/Page.astro";
import Project from "@components/Project.astro";
import RectPattern from "@components/RectPattern.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "consts";
import { getCollection } from "astro:content";
import type { Link } from "interfaces/Link";

const { default: eye } = await import(`/src/assets/icons/eye.svg?raw`);
const { default: book } = await import(`/src/assets/icons/book.svg?raw`);
const { default: github } = await import(`/src/assets/icons/github.svg?raw`);

const icons: { [key: string]: string } = { eye, book, github };

const professionalProjects = (await getCollection("professional-projects")).sort((a, b) => a.data.id - b.data.id);
const personalProjects = (await getCollection("personal-projects")).sort((a, b) => a.data.id - b.data.id);
---

<Page title={"Projects - " + SITE_TITLE} description={SITE_DESCRIPTION} addNight={true}>
  <section
    transition:animate="fade"
    id="projects"
    class="bg-transparent flex flex-col justify-center flex-1 w-full m-auto box-border p-6 pt-12 pb-6 max-w-[900px] max-sm:pb-8"
  >
    <h2 class="section-title font-bold">Projects</h2>

    <h3 class="mt-8 font-semibold lg:text-center uppercase text-[color:var(--clr-fg)]">Professional Projects</h3>
    <div class="pt-12 grid gap-1 lg:grid-cols-2 lg:gap-y-6">
      {
        professionalProjects.map((project) => (
          <Project {...project} links={project.data.links.map((l: Link) => ({ ...l, icon: icons[l.icon] }))} />
        ))
      }
    </div>
    <h3 class="mt-12 font-semibold lg:text-center uppercase text-[color:var(--clr-fg)]">Personal Projects</h3>
    <div class="py-12 grid gap-1 lg:grid-cols-2 lg:gap-y-6">
      {
        personalProjects.map((project) => (
          <Project {...project} links={project.data.links.map((l: Link) => ({ ...l, icon: icons[l.icon] }))} />
        ))
      }
    </div>

    <RectPattern width={250} height={250} id="rect-left" />
    <RectPattern width={230} height={230} id="rect-right" />
  </section>
</Page>
<style>
  :global(#projects > #rect-right) {
    position: absolute;
    right: 0;
    bottom: calc(100vh / 5);
    z-index: -1;
  }
  :global(#projects > #rect-left) {
    position: absolute;
    left: 0;
    top: 128px;
    z-index: -1;
  }

  :global(#projects:has(.project:hover) .project) {
    opacity: 0.7;
  }

  @media (max-width: 640px) {
    :global(#projects > #rect-left) {
      top: 300px;
    }

    :global(#projects > #rect-right) {
      top: unset;
    }
    :global(#projects > #rect-left-bottom) {
      bottom: 0;
    }
  }
</style>
<script>
  const projects = document.querySelectorAll(".project");

  projects.forEach((link) => {
    link.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      if (
        target.classList.contains("link--icon") ||
        (target.parentNode as HTMLElement).classList.contains("link--icon")
      ) {
        return;
      }

      const project = target.closest(".project") as HTMLElement;
      const link = project?.dataset.link;
      window.open(link, "_blank")?.focus();
    });
  });
</script>
