---
import FormattedDate from "@components/blog/FormattedDate.astro";
import BaseHead from "@components/BaseHead.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { getCollection } from "astro:content";
import { getViewCount } from "utils/viewCount";
import ScrollToTop from "@components/ScrollToTop.astro";

// import "@assets/styles/blog.css";

const { title, description, pubDate, updatedDate, url, ...props } = Astro.props;
const { default: back } = await import(`/src/assets/icons/angle-left.svg?raw`);

const posts = (await getCollection("blog"))
  .sort(() => Math.random() - 0.5)
  .filter((p) => p.data.title !== title)
  .slice(0, 2);

const ogImage = {
  src: `/image/${url}.png`,
  alt: title,
};

const [viewCount] = await getViewCount(url);

let count = 0;
if (viewCount) count = viewCount.count;

const theme = Astro.cookies.get("theme")?.value || "";
const ecTheme = theme === "dark" ? "one-dark-pro" : "github-light";
---

<!doctype html>
<html lang="en" data-theme={ecTheme}>
  <head>
    <BaseHead title={title} description={description} ogImage={ogImage} />
    {pubDate && <meta property="article:published_time" content={pubDate.toISOString()} />}
  </head>
  <body class="relative sm:pt-24" id="top" data-theme={theme}>
    <Header />
    <main
      {...props}
      class="bg-transparent relative max-sm:p-6 max-w-[700px] w-full m-auto box-border animate-fade-left animate-ease-out"
    >
      <div class="go-back mb-8 mt-12 sm:mt-0">
        <a href="/blog" class="flex gap-2">
          <Fragment set:html={back} /> Back to Blog
        </a>
      </div>
      <article>
        <div class="flex flex-col justify-center flex-1">
          <div class="title">
            <div class="statistics flex gap-4">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <div class="last-updated-on ">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }

              <span class="text-sm text-[var(--clr-quote)]">{count} View{count == 1 ? "" : "s"}</span>
            </div>
            <h1 class="text-4xl sm:text-5xl sm:leading-tight">{title}</h1>
            <hr />
          </div>
          <slot />
        </div>
      </article>
      <div class="py-12">
        <h2>Keep reading</h2>
        <div class="pt-10 grid gap-16 sm:grid-cols-2 sm:gap-x-8 sm:gap-y-12">
          {
            posts.map((post: any) => (
              <a class="" href={`/blog/${post.slug}/`}>
                <div class="mb-2">
                  <h4>{post.data.title}</h4>
                  <FormattedDate date={post.data.pubDate} />
                </div>

                <p>{post.data.description}</p>
              </a>
            ))
          }
        </div>
      </div>
      <Footer />
    </main>
    <ScrollToTop />
  </body>
</html>
