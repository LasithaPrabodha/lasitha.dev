---
import type { Link } from "../interfaces/Link";
import IconLink from "./IconLink.astro";

const { data, links } = Astro.props;
const { title, description, technologies } = data;
---

<div class="project w-full" data-link={links[0].href}>
  <h4 class="title">{title}</h4>
  <p class="project-description">{description}</p>

  <div class="flex justify-between">
    <ul class="project-stack">
      {technologies.map((t: string) => <li class="project-stack-item">{t}</li>)}
    </ul>
    <div class="project-links flex items-center">
      {links.map((l: Link) => <IconLink href={l.href} icon={l.icon} ariaLabel={l.ariaLabel} />)}
    </div>
  </div>
</div>
<style>
  .project {
    cursor: pointer;
    margin: 0 auto;
    padding: 1em;
    display: flex;
    flex-direction: column;
    background-color: var(--clr-bg);
    border-radius: 8px;
    transition:
      border ease-in 0.2s,
      opacity ease-in 0.2s;
    box-shadow: unset;
    border: 0.5px solid var(--clr-bg);
  }
  .project-links {
    opacity: 0;
    transition: var(--transition);
    transform: translate3d(0, -20%, 0);
  }

  .project:hover {
    border: 0.5px solid var(--clr-bg-code);
    opacity: 1 !important;
  }
  .project:hover .project-links {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }

  .project-description {
    margin-top: 1em;
    margin-bottom: 1em;
    flex: 1;
  }

  .project-stack {
    margin-bottom: 0.5em;
    display: flex;
    flex-wrap: wrap;
  }

  .project-stack-item {
    margin-right: 0.5em;
    margin-top: 0.5em;
    font-weight: 500;
    font-size: 0.8rem;
    color: var(--clr-grd-one);
    padding: 0 1em;
    border-radius: 50px;
    background-color: var(--clr-chip-bg);
    line-height: 1.8em;
  }

  a {
    margin-right: 0.5em;
  }
  :global(.project-links svg) {
    width: 16px;
    height: 16px;
  }
</style>
<script>
  const projects = document.querySelectorAll(".project");

  projects.forEach((link) => {
    link.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      if (
        target.classList.contains("link--icon") ||
        (target.parentNode as HTMLElement).classList.contains("link--icon")
      ) {
        return;
      }

      const project = target.closest(".project") as HTMLElement;
      const link = project?.dataset.link;
      window.open(link, "_blank")?.focus();
    });
  });
</script>
